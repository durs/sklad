SET TERM ---;

ALTER TRIGGER DOC_BEFOREINSERT AS
BEGIN
  /* correct field values */
  IF (NEW.CLIENTID1 IS NULL) THEN NEW.CLIENTID1 = 0;
  IF (NEW.CLIENTID2 IS NULL) THEN NEW.CLIENTID2 = 0;
  IF (NEW.CLIENTID1 = NEW.CLIENTID2) THEN NEW.CLIENTID2=0;
  IF (NEW.SUM0 IS NULL) THEN NEW.SUM0 = 0;

  /* test reg */
  IF (GEN_ID(GENREG, 0) > 0) THEN BEGIN IF (GEN_ID(GENREG, 1) > 5000) THEN EXCEPTION E_REG; END

  /*update doc no*/
  EXECUTE PROCEDURE UPDATE_DOCNO NEW.CLIENTID1, NEW.KIND, NEW.SKIND, NEW.DOCNO, NEW.SUM0, 0 
  RETURNING_VALUES NEW.DOCNO;

  /*update debit*/
  IF (NEW.KIND < 256) THEN BEGIN
    EXECUTE PROCEDURE UPDATE_DEBIT NEW.DOCID, NEW.PDOCID, NEW.CLIENTID1, NEW.CLIENTID2, NEW.SUM0
    RETURNING_VALUES NEW.OST;
  END 
  ELSE BEGIN
    NEW.OST = NEW.SUM0;
  END
END
---

ALTER TRIGGER DOC_BEFOREUPDATE AS
DECLARE VARIABLE DIFF DOUBLE PRECISION;
BEGIN
  /* correct field values */
  IF (NEW.CLIENTID1 IS NULL) THEN NEW.CLIENTID1 = 0;
  IF (NEW.CLIENTID2 IS NULL) THEN NEW.CLIENTID2 = 0;
  IF (NEW.CLIENTID1 = NEW.CLIENTID2) THEN NEW.CLIENTID2 = 0;
  IF (NEW.SUM0 IS NULL) THEN NEW.SUM0 = 0;
  IF (NEW.OST IS NULL) THEN NEW.OST = 0;

  /* test field values */
  /*IF (OLD.KIND>512) THEN EXCEPTION E_ARCHIV;*/
  IF (OLD.DOCID <> NEW.DOCID) THEN EXCEPTION E_FIELD_UPDATE;
  IF (OLD.CLIENTID1 <> NEW.CLIENTID1) THEN BEGIN
    IF (EXISTS(SELECT * FROM DOC_PROD WHERE DOCID = OLD.DOCID AND INDOCID IS NOT NULL)) THEN EXCEPTION E_FIELD_UPDATE;
  END

  /*update doc no*/
  EXECUTE PROCEDURE UPDATE_DOCNO OLD.CLIENTID1,OLD.KIND,OLD.SKIND,OLD.DOCNO,OLD.SUM0,1 RETURNING_VALUES OLD.DOCNO;
  EXECUTE PROCEDURE UPDATE_DOCNO NEW.CLIENTID1,NEW.KIND,NEW.SKIND,NEW.DOCNO,NEW.SUM0,0 RETURNING_VALUES NEW.DOCNO;

  /*update debit*/
  IF ((OLD.KIND < 256 AND NEW.KIND > 256) OR (OLD.CLIENTID1 <> NEW.CLIENTID1) OR (OLD.CLIENTID2 <> NEW.CLIENTID2)) THEN BEGIN
    /*delete debit*/
    DIFF = OLD.OST - OLD.SUM0;
    EXECUTE PROCEDURE UPDATE_DEBIT_UNDO OLD.DOCID, OLD.PDOCID, OLD.CLIENTID1, OLD.CLIENTID2, :DIFF;
    NEW.OST = NEW.SUM0;
  END 
  IF ((OLD.KIND > 256 AND NEW.KIND < 256) OR (OLD.CLIENTID1 <> NEW.CLIENTID1) OR (OLD.CLIENTID2 <> NEW.CLIENTID2)) THEN BEGIN
    /*insert debit*/
    EXECUTE PROCEDURE UPDATE_DEBIT NEW.DOCID, NEW.PDOCID, NEW.CLIENTID1, NEW.CLIENTID2, NEW.SUM0
    RETURNING_VALUES NEW.OST;    
  END 
  ELSE IF (NEW.KIND < 256) THEN BEGIN
    /*update debit*/
    IF (OLD.SUM0 IS NULL) THEN DIFF = NEW.SUM0; ELSE DIFF=NEW.SUM0-OLD.SUM0;
    IF (DIFF<>0) THEN BEGIN
      IF (OLD.OST IS NULL) THEN NEW.OST = DIFF; ELSE NEW.OST = OLD.OST+DIFF;
      EXECUTE PROCEDURE UPDATE_DEBIT NEW.DOCID, NEW.PDOCID, NEW.CLIENTID1, NEW.CLIENTID2, NEW.OST
      RETURNING_VALUES NEW.OST;
      DIFF = 0;
      IF (NEW.SUM0 > 0) THEN BEGIN
        IF (NEW.OST < 0) THEN BEGIN
          DIFF = NEW.OST;
          NEW.OST = 0;
        END 
        ELSE IF (NEW.OST > NEW.SUM0) THEN BEGIN
          DIFF = NEW.OST - NEW.SUM0;
          NEW.OST = NEW.SUM0;
        END
      END 
      ELSE BEGIN
        IF (NEW.OST > 0) THEN BEGIN
          DIFF = NEW.OST;
          NEW.OST = 0;          
        END 
        ELSE IF (NEW.OST < NEW.SUM0) THEN BEGIN
          DIFF = NEW.OST - NEW.SUM0;
          NEW.OST = NEW.SUM0;
        END
      END
      IF (DIFF <> 0) THEN EXECUTE PROCEDURE UPDATE_DEBIT_UNDO NEW.DOCID, NEW.PDOCID, NEW.CLIENTID1, NEW.CLIENTID2, :DIFF;
    END
  END

  /*update doc_prod*/
  IF (NEW.CLIENTID2 <> OLD.CLIENTID2 OR NEW.DATE1 <> OLD.DATE1) THEN
    UPDATE DOC_PROD SET CLIENTID2 = NEW.CLIENTID2, DATE1 = NEW.DATE1 WHERE DOCID = NEW.DOCID;
END
---

ALTER PROCEDURE CREATE_DOC_PRODUCT (
  PDOCID INTEGER
) RETURNS (
  DOCID INTEGER
) AS                                        
DEClARE VARIABLE E DOUBLE PRECISION;   
DEClARE VARIABLE CLIENTID1 INTEGER;   
DEClARE VARIABLE CLIENTID2 INTEGER;   
DEClARE VARIABLE PRECID INTEGER;   
DEClARE VARIABLE PCNT DOUBLE PRECISION;
DEClARE VARIABLE PARAM1 INTEGER;   
DEClARE VARIABLE PRICEPER DOUBLE PRECISION;   
DEClARE VARIABLE PRICERND INTEGER;   
DEClARE VARIABLE RECID INTEGER;   
DEClARE VARIABLE INDOCID INTEGER;   
DEClARE VARIABLE INRECID INTEGER;   
DEClARE VARIABLE PRODID INTEGER;   
DEClARE VARIABLE CNT DOUBLE PRECISION;   
DEClARE VARIABLE UNIT DOUBLE PRECISION;   
DEClARE VARIABLE INPRICE DOUBLE PRECISION;   
DEClARE VARIABLE INNDSPRICE DOUBLE PRECISION;   
DEClARE VARIABLE OUTPRICE DOUBLE PRECISION;   
DEClARE VARIABLE NEWPRICE DOUBLE PRECISION;   
DEClARE VARIABLE NDSPRICE DOUBLE PRECISION;   
DEClARE VARIABLE NDS DOUBLE PRECISION;   
DEClARE VARIABLE SUM0 DOUBLE PRECISION;   
DEClARE VARIABLE SUM1 DOUBLE PRECISION;   
BEGIN
  E=0.00001;  
  SELECT CLIENTID1, CLIENTID2 FROM DOC WHERE DOCID = :PDOCID INTO :CLIENTID2, :CLIENTID1;

  SELECT DOCPARAM1, PRICE_PERCENT, PRICE_ROUND FROM SKLAD WHERE CLIENTID = :CLIENTID1 INTO :PARAM1, :PRICEPER, :PRICERND;
  IF (PRICEPER IS NULL) THEN PRICEPER = 0;
  IF (PRICERND IS NULL OR PRICERND = 0) THEN PRICERND = 100;  
  RECID = 0;
  SUM0 = 0;
  SUM1 = 0;
  
  FOR SELECT RECID, PRODID, UNIT * (CNT - RCNT - UCNT)
  FROM DOC_PROD
  WHERE DOCID = :PDOCID AND CNT > RCNT 
  INTO :PRECID, :PRODID, :PCNT
  DO BEGIN

    FOR SELECT DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.UNIT, DOC_PROD.CNT - DOC_PROD.RCNT - DOC_PROD.UCNT, DOC_PROD.PRICE, DOC_PROD.NDSPRICE, DOC_PROD.NEWPRICE, PRODUCT.NDS
    FROM DOC_PROD
    INNNER JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID AND DOC.CLIENTID2 = :CLIENTID1 AND DOC.KIND = 1
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    WHERE DOC_PROD.KIND=0 AND DOC_PROD.PRODID = :PRODID
    INTO :INDOCID, :INRECID, :UNIT, :CNT, :INPRICE, :INNDSPRICE, :OUTPRICE, :NDS
    DO IF (PCNT > E AND CNT > E) THEN BEGIN
      
      IF (CNT * UNIT >= PCNT) THEN BEGIN
        CNT = PCNT / UNIT;
        PCNT = 0;
      END 
      ELSE BEGIN
        PCNT = PCNT - CNT * UNIT;
      END

      IF (NDS IS NULL) THEN NDS = 0;
      IF (BIT_AND(PARAM1, 2) = 2) /*check nds*/
        THEN NDSPRICE = OUTPRICE * (NDS / (100 + NDS));
        ELSE NDSPRICE = 0;
      NEWPRICE = ROUND_CEIL(OUTPRICE * (1 + PRICEPER / 100), PRICERND);

      IF (DOCID IS NULL) THEN DOCID = GEN_ID(GENDOCID, 1);
      RECID = RECID + 10;
      
      INSERT INTO DOC_PROD (DOCID, CLIENTID2, RECID, KIND, INDOCID, INRECID, PDOCID, PRECID, PRODID, UNIT, CNT, INPRICE, INNDSPRICE, OUTPRICE, PRICE, NDSPRICE, NEWPRICE, NALOGSUM)
      VALUES (:DOCID, :CLIENTID2, :RECID, 1, :INDOCID, :INRECID, :PDOCID, :PRECID, :PRODID, :UNIT, :CNT, :INPRICE, :INNDSPRICE, :OUTPRICE, :OUTPRICE, :NDSPRICE, :NEWPRICE, 0);

      SUM0 = SUM0 + ROUND_CURR(OUTPRICE * CNT * UNIT);
      SUM1 = SUM1 + ROUND_CURR(NDSPRICE * CNT * UNIT);
    END
  END

  IF (DOCID IS NOT NULL) THEN
    INSERT INTO DOC (DOCID, CLIENTID1, CLIENTID2, KIND, SKIND, PARAM1, SUM0, SUM1, SUM2)
    VALUES (:DOCID, :CLIENTID1, :CLIENTID2, 257, 0, BIT_AND(:PARAM1, 2), :SUM0, :SUM1, 0);
END
---

ALTER PROCEDURE QUERY_BOOK_IN (
  CLNTID INTEGER,
  FIRSTDATE DATE,
  LASTDATE DATE
) RETURNS (
  DOCID INTEGER,
  CLIENTID1 INTEGER,
  CLIENTID2 INTEGER,
  KIND INTEGER,
  SKIND INTEGER,
  DOCNO VARCHAR(10),
  DATE1 DATE,
  DATE2 DATE,
  SUM0 DOUBLE PRECISION,
  SUM1 DOUBLE PRECISION,
  SUM2 DOUBLE PRECISION,
  SUM10 DOUBLE PRECISION,
  SUM20 DOUBLE PRECISION,
  NDSSUM10 DOUBLE PRECISION,
  NDSSUM20 DOUBLE PRECISION
) AS                                                                   
DECLARE VARIABLE NALOGSUM DOUBLE PRECISION;                                       
BEGIN
  FOR SELECT D.DOCID, D.CLIENTID1, D.CLIENTID2, D.KIND, D.SKIND, D.DOCNO, D.DATE1, D.DATE2,
    D.SUM0, D.SUM1, D.SUM2
    FROM DOC D
    WHERE D.CLIENTID2 = :CLNTID AND D.KIND = 1 /*AND D.SKIND > 0*/
    AND D.DATE2 >= :FIRSTDATE AND D.DATE2 <= :LASTDATE
    ORDER BY D.DATE2, D.DOCID
  INTO :DOCID, :CLIENTID1, :CLIENTID2, :KIND, :SKIND, :DOCNO, :DATE1, :DATE2, :SUM0, :SUM1, :SUM2
  DO BEGIN
    IF (SUM0 IS NULL) THEN SUM0 = 0;
    IF (SUM1 IS NULL) THEN SUM1 = 0;
    IF (SUM2 IS NULL) THEN SUM2 = 0;

    SELECT SUM(DOC_PROD.PRICE * DOC_PROD.UNIT * DOC_PROD.CNT), SUM(DOC_PROD.NDSPRICE * DOC_PROD.UNIT * DOC_PROD.CNT), SUM(DOC_PROD.NALOGSUM)
    FROM DOC_PROD
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    WHERE DOC_PROD.DOCID = :DOCID AND PRODUCT.NDS = 10
    INTO :SUM10, :NDSSUM10, :NALOGSUM;
    IF (SUM10 IS NULL) THEN SUM10 = 0;
    IF (NDSSUM10 IS NULL) THEN NDSSUM10 = 0;
    /*IF (NALOGSUM IS NOT NULL) THEN SUM10 = SUM10 - NALOGSUM;*/
    SUM10 = SUM10 - NDSSUM10;

    SELECT SUM(DOC_PROD.PRICE * DOC_PROD.UNIT * DOC_PROD.CNT), SUM(DOC_PROD.NDSPRICE * DOC_PROD.UNIT * DOC_PROD.CNT), SUM(DOC_PROD.NALOGSUM)
    FROM DOC_PROD
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    WHERE DOC_PROD.DOCID = :DOCID AND PRODUCT.NDS = 20
    INTO :SUM20, :NDSSUM20, :NALOGSUM;
    IF (SUM20 IS NULL) THEN SUM20 = 0;
    IF (NDSSUM20 IS NULL) THEN NDSSUM20 = 0;
    /*IF (NALOGSUM IS NOT NULL) THEN SUM20 = SUM20 - NALOGSUM;*/
    SUM20 = SUM20 - NDSSUM20;

    SUSPEND;
  END
END
---

ALTER PROCEDURE QUERY_BOOK_INNER (
  CLNTID INTEGER,
  FIRSTDATE DATE,
  LASTDATE DATE
) RETURNS (
  CNT DOUBLE PRECISION,
  INSUM DOUBLE PRECISION,
  INNDSSUM DOUBLE PRECISION,
  INSUM10 DOUBLE PRECISION,
  INSUM20 DOUBLE PRECISION,
  INNDSSUM10 DOUBLE PRECISION,
  INNDSSUM20 DOUBLE PRECISION,
  OUTSUM DOUBLE PRECISION,
  OUTNDSSUM DOUBLE PRECISION,
  OUTNALOGSUM DOUBLE PRECISION,
  OUTSUM10 DOUBLE PRECISION,
  OUTSUM20 DOUBLE PRECISION,
  OUTNDSSUM10 DOUBLE PRECISION,
  OUTNDSSUM20 DOUBLE PRECISION
) AS      
DECLARE VARIABLE NALOGSUM DOUBLE PRECISION;                                       
BEGIN

  SELECT SUM(DOC_PROD.UNIT * DOC_PROD.CNT),
    SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INPRICE), SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INNDSPRICE),
    SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.PRICE), SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.NDSPRICE), SUM(DOC_PROD.NALOGSUM)
  FROM DOC
  JOIN DOC_PROD ON DOC_PROD.DOCID = DOC.DOCID
  WHERE DOC.CLIENTID1 = :CLNTID
  AND DOC.DATE2 >= :FIRSTDATE AND DOC.DATE2 <= :LASTDATE
  AND DOC.KIND = 1 AND DOC.SKIND <= 0     
  INTO :CNT, :INSUM, :INNDSSUM, :OUTSUM, :OUTNDSSUM, :OUTNALOGSUM;
  IF (CNT IS NULL) THEN CNT = 0;
  IF (INSUM IS NULL) THEN INSUM = 0;
  IF (INNDSSUM IS NULL) THEN INNDSSUM = 0;
  IF (OUTSUM IS NULL) THEN OUTSUM = 0;
  IF (OUTNDSSUM IS NULL) THEN OUTNDSSUM = 0;
  IF (OUTNALOGSUM IS NULL) THEN OUTNALOGSUM = 0;

  SELECT 
    SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INPRICE), SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INNDSPRICE),
    SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.PRICE), SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.NDSPRICE),
    SUM(DOC_PROD.NALOGSUM)
  FROM DOC
  JOIN DOC_PROD ON DOC_PROD.DOCID = DOC.DOCID
  LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
  WHERE DOC.CLIENTID1 = :CLNTID
  AND DOC.DATE2 >= :FIRSTDATE AND DOC.DATE2 <= :LASTDATE
  AND DOC.KIND = 1 AND DOC.SKIND <= 0     
  AND PRODUCT.NDS = 10
  INTO :INSUM10, :INNDSSUM10, :OUTSUM10, :OUTNDSSUM10, :NALOGSUM;
  IF (INSUM10 IS NULL) THEN INSUM10 = 0;
  IF (INNDSSUM10 IS NULL) THEN INNDSSUM10 = 0;
  IF (OUTSUM10 IS NULL) THEN OUTSUM10 = 0;
  IF (OUTNDSSUM10 IS NULL) THEN OUTNDSSUM10 = 0;
  IF (NALOGSUM IS NOT NULL) THEN OUTSUM10 = OUTSUM10 - NALOGSUM;
  INSUM10 = INSUM10-INNDSSUM10;
  OUTSUM10 = OUTSUM10-OUTNDSSUM10;

  SELECT
    SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INPRICE), SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INNDSPRICE),
    SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.PRICE), SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.NDSPRICE),
    SUM(DOC_PROD.NALOGSUM)
  FROM DOC
  JOIN DOC_PROD ON DOC_PROD.DOCID = DOC.DOCID
  LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
  WHERE DOC.CLIENTID1 = :CLNTID
  AND DOC.DATE2 >= :FIRSTDATE AND DOC.DATE2 <= :LASTDATE
  AND DOC.KIND = 1 AND DOC.SKIND <= 0     
  AND PRODUCT.NDS = 20
  INTO :INSUM20, :INNDSSUM20, :OUTSUM20, :OUTNDSSUM20, :NALOGSUM;
  IF (INSUM20 IS NULL) THEN INSUM20 = 0;
  IF (INNDSSUM20 IS NULL) THEN INNDSSUM20 = 0;
  IF (OUTSUM20 IS NULL) THEN OUTSUM20 = 0;
  IF (OUTNDSSUM20 IS NULL) THEN OUTNDSSUM20 = 0;
  IF (NALOGSUM IS NOT NULL) THEN OUTSUM20 = OUTSUM20 - NALOGSUM;
  INSUM20 = INSUM20 - INNDSSUM20;
  OUTSUM20 = OUTSUM20 - OUTNDSSUM20;

  IF (CNT <> 0) THEN SUSPEND;
END
---



SET TERM ;
---

COMMIT WORK;
EXECUTE PROCEDURE GET_VERSION(1);