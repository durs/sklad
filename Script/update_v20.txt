ALTER TABLE SKLAD
ADD PRICE_PERCENT2 TYPE_FLOAT,
ADD PRICE_ROUND2 TYPE_SHORT,
ADD PRICE_PERCENT3 TYPE_FLOAT,
ADD PRICE_ROUND3 TYPE_SHORT;

ALTER TABLE DOC
ADD PARAM7 TYPE_FLOAT;

ALTER TABLE DOC_PROD
ADD NEWPRICE2 TYPE_CURR,
ADD NEWPRICE3 TYPE_CURR;

ALTER TABLE PRODUCT
ADD PRICE2 TYPE_CURR,
ADD PRICE3 TYPE_CURR;


SET TERM ^ ;


ALTER PROCEDURE QUERY_OSTATOK (
    ID INTEGER,
    ID2 INTEGER)
RETURNS (
    INDOCID INTEGER,
    INRECID INTEGER,
    PDOCID INTEGER,
    PRECID INTEGER,
    PRODID INTEGER,
    DATE1 TIMESTAMP,
    CNT DOUBLE PRECISION,
    UNIT DOUBLE PRECISION,
    INPRICE DOUBLE PRECISION,
    INNDSPRICE DOUBLE PRECISION,
    OUTPRICE DOUBLE PRECISION,
    OUTPRICE2 DOUBLE PRECISION,
    OUTPRICE3 DOUBLE PRECISION,
    PRODUCTNAME VARCHAR(50),
    CLASSNAME VARCHAR(10),
    PRODUSERNAME VARCHAR(10),
    PRODUCT VARCHAR(100),
    DIM VARCHAR(10),
    LEN VARCHAR(10),
    WEIGHT FLOAT,
    LASTPRICE DOUBLE PRECISION,
    NDS FLOAT,
    COUNTRY VARCHAR(50),
    NTD BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    SERTIFICAT BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    COMMENT BLOB SUB_TYPE 0 SEGMENT SIZE 80)
AS
BEGIN
  IF (ID IS NULL) THEN
    FOR SELECT
      PRODUCT.PRODID, PRODUCT.UNIT, PRODUCT.NDS, PRODUCT.NAME, PRODUCT.DIM, PRODUCT.LEN, PRODUCT.WEIGHT, PRODUCT.PRICE, PRODUCT.COMMENT, PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME, PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME, CLASS.SMALLNAME, PRODUSER.SMALLNAME, PRODUCT.LEN)
    FROM PRODUCT
    LEFT JOIN CLASS ON CLASS.CLASSID = PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID = PRODUCT.PRODUSERID
    ORDER BY PRODUCT.NAME, PRODUCT.CLASSID, PRODUCT.PRODUSERID, PRODUCT.LEN
    INTO :PRODID, :UNIT, :NDS, :PRODUCTNAME, :DIM, :LEN, :WEIGHT, :LASTPRICE, :COMMENT, :SERTIFICAT, :CLASSNAME, :PRODUSERNAME, :COUNTRY, :PRODUCT
    DO SUSPEND;
  ELSE IF (ID2 IS NULL) THEN
    FOR SELECT
      DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.PRODID, DOC_PROD.CNT - DOC_PROD.RCNT - DOC_PROD.UCNT, DOC_PROD.UNIT, DOC_PROD.PRICE, DOC_PROD.NDSPRICE, DOC_PROD.NEWPRICE, DOC_PROD.NEWPRICE2, DOC_PROD.NEWPRICE3, DOC_PROD.NTD, DOC_PROD.COMMENT,
      DOC_PROD.DATE1,
      PRODUCT.NDS, PRODUCT.NAME, PRODUCT.DIM, PRODUCT.LEN, PRODUCT.WEIGHT, PRODUCT.PRICE, PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME, PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME, CLASS.SMALLNAME, PRODUSER.SMALLNAME, PRODUCT.LEN)
    FROM DOC_PROD
    /*INNER JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID AND DOC.CLIENTID2=:ID AND DOC.KIND=1*/
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    LEFT JOIN CLASS ON CLASS.CLASSID = PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID = PRODUCT.PRODUSERID
    WHERE DOC_PROD.KIND = 0 AND DOC_PROD.CLIENTID2 = :ID
    ORDER BY PRODUCT.NAME, PRODUCT.CLASSID, PRODUCT.PRODUSERID, PRODUCT.LEN, DOC_PROD.DATE1
    INTO :INDOCID, :INRECID, :PRODID, :CNT, :UNIT, :INPRICE, :INNDSPRICE, :OUTPRICE, :OUTPRICE2, :OUTPRICE3, :NTD, :COMMENT, :DATE1, :NDS, :PRODUCTNAME, :DIM, :LEN, :WEIGHT, :LASTPRICE, :SERTIFICAT, :CLASSNAME, :PRODUSERNAME, :COUNTRY, :PRODUCT
    DO SUSPEND;
  ELSE
    FOR SELECT
      DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.INDOCID, DOC_PROD.INRECID,
      DOC_PROD.PRODID, DOC_PROD.CNT - DOC_PROD.RCNT - DOC_PROD.UCNT, DOC_PROD.UNIT, DOC_PROD.INPRICE, DOC_PROD.INNDSPRICE, DOC_PROD.PRICE, DOC_PROD.NTD, DOC_PROD.COMMENT,
      DOC.DATE1,
      PRODUCT.NDS, PRODUCT.NAME, PRODUCT.DIM, PRODUCT.LEN, PRODUCT.WEIGHT, PRODUCT.PRICE, PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME, PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME, CLASS.SMALLNAME, PRODUSER.SMALLNAME, PRODUCT.LEN)
    FROM DOC_PROD
    INNER JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID AND DOC.CLIENTID1 = :ID AND DOC.CLIENTID2 = :ID2 AND DOC.KIND = 1
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    LEFT JOIN CLASS ON CLASS.CLASSID = PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID = PRODUCT.PRODUSERID
    WHERE DOC_PROD.KIND = 0
    ORDER BY PRODUCT.NAME, PRODUCT.CLASSID, PRODUCT.PRODUSERID, PRODUCT.LEN, DOC.DATE1 DESC
    INTO :PDOCID, :PRECID, :INDOCID, :INRECID, :PRODID, :CNT, :UNIT, :INPRICE, :INNDSPRICE, :OUTPRICE, :NTD, :COMMENT, :DATE1, :NDS, :PRODUCTNAME, :DIM, :LEN, :WEIGHT, :LASTPRICE, :SERTIFICAT, :CLASSNAME, :PRODUSERNAME, :COUNTRY, :PRODUCT
    DO SUSPEND;
END
^


ALTER PROCEDURE EXPORT_PRODUCT (
    CLIENTID1 INTEGER,
    CLIENTID2 INTEGER,
    INDOCID INTEGER,
    INRECID INTEGER,
    PRODID INTEGER,
    CNT DOUBLE PRECISION,
    UNIT DOUBLE PRECISION)
RETURNS (
    DOCID INTEGER,
    RECID INTEGER,
    PRICE DOUBLE PRECISION,
    NDSPRICE DOUBLE PRECISION)
AS
DECLARE VARIABLE PARAM1 INTEGER;
DECLARE VARIABLE PER DOUBLE PRECISION;
DECLARE VARIABLE PRICEPER DOUBLE PRECISION;
DECLARE VARIABLE PRICEPER2 DOUBLE PRECISION;
DECLARE VARIABLE PRICEPER3 DOUBLE PRECISION;
DECLARE VARIABLE PRICERND INTEGER;
DECLARE VARIABLE PRICERND2 INTEGER;
DECLARE VARIABLE PRICERND3 INTEGER;
DECLARE VARIABLE PRICEPARAM INTEGER;
DECLARE VARIABLE INUNIT DOUBLE PRECISION;
DECLARE VARIABLE NDS DOUBLE PRECISION;
DECLARE VARIABLE INOUTPRICE DOUBLE PRECISION;
DECLARE VARIABLE INPRICE DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE2 DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE3 DOUBLE PRECISION;
DECLARE VARIABLE INNDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE SUM0 DOUBLE PRECISION;
DECLARE VARIABLE SUM1 DOUBLE PRECISION;
BEGIN
  /*search document*/
  FOR SELECT DOCID, PARAM1, PARAM2 FROM DOC
    WHERE CLIENTID1 = :CLIENTID1 AND CLIENTID2 = :CLIENTID2 AND KIND = 1 AND SKIND = -1
    INTO :DOCID, :PARAM1, :PER
  DO RECID = NULL;

  /*insert document if not found*/
  IF (DOCID IS NULL) THEN BEGIN
    SELECT DOCPARAM1, DOCPARAM2 FROM SKLAD WHERE CLIENTID = :CLIENTID1 INTO :PARAM1, :PER;
    DOCID = GEN_ID(GENDOCID,1);
    
    INSERT INTO DOC (DOCID, CLIENTID1, CLIENTID2, KIND, SKIND, PARAM1, PARAM2, SUM0, SUM1, SUM2)
    VALUES (:DOCID, :CLIENTID1, :CLIENTID2, 1, -1, :PARAM1, :PER, 0, 0, 0);
  END

  /*search record in document*/
  ELSE BEGIN
    SELECT RECID, UNIT, PRICE, NDSPRICE FROM DOC_PROD
    WHERE DOCID = :DOCID AND INDOCID = :INDOCID AND INRECID = :INRECID
    INTO :RECID, :INUNIT, :PRICE, :NDSPRICE;
  END

  /*insert record if not found*/
  IF (RECID IS NULL) THEN BEGIN
    IF (PARAM1 IS NULL) THEN PARAM1 = 0;
    IF (PER IS NULL) THEN PER = 0;
    
    /*read sklad parameters*/
    SELECT PRICE_PERCENT, PRICE_ROUND, PRICE_PERCENT2, PRICE_ROUND2, PRICE_PERCENT3, PRICE_ROUND3, PRICE_PARAM
        FROM SKLAD WHERE CLIENTID = :CLIENTID2 INTO :PRICEPER, :PRICERND, :PRICEPER2, :PRICERND2, :PRICEPER3, :PRICERND3, :PRICEPARAM;
    IF (PRICEPER IS NULL) THEN PRICEPER = 0;
    IF (PRICERND IS NULL OR PRICERND = 0) THEN PRICERND = 100;
    IF (PRICEPER2 IS NULL) THEN PRICEPER2 = 0;
    IF (PRICERND2 IS NULL OR PRICERND2 = 0) THEN PRICERND2 = 100;
    IF (PRICEPER3 IS NULL) THEN PRICEPER3 = 0;
    IF (PRICERND3 IS NULL OR PRICERND3 = 0) THEN PRICERND3 = 100;
    IF (PRICEPARAM IS NULL) THEN PRICEPARAM = 0;

    /*read product info*/
    IF (INDOCID IS NOT NULL) THEN BEGIN
      PRODID = NULL;
      
      SELECT PRODID, UNIT, PRICE, NEWPRICE, NDSPRICE FROM DOC_PROD
      WHERE DOCID = :INDOCID AND RECID = :INRECID
      INTO :PRODID, :INUNIT, :INPRICE, :INOUTPRICE, :INNDSPRICE;
    
      IF (PRODID IS NULL) THEN EXCEPTION E_OST_NOTFOUND;
    END ELSE BEGIN
      INUNIT = UNIT;
    END
    
    NDS = 0;
    SELECT NDS, PRICE FROM PRODUCT WHERE PRODID = :PRODID INTO :NDS, :NEWPRICE;
    
    /*calculare record id*/
    SELECT MAX(RECID) + 10 FROM DOC_PROD WHERE DOCID = :DOCID INTO :RECID;
    IF (RECID IS NULL) THEN RECID = 10;
    
    /*calculate product price*/
    CNT = CNT * (UNIT / INUNIT);
    IF (BIT_AND(PARAM1, 4) = 4) /*check in price*/
      THEN PRICE = ROUND_CURR(INPRICE * (1 + PER / 100));
      ELSE PRICE = ROUND_CURR(INOUTPRICE * (1 + PER / 100));
    IF (BIT_AND(PARAM1, 2) = 2) /*check nds*/
      THEN NDSPRICE = PRICE * (NDS / (100 + NDS));
      ELSE NDSPRICE = 0;
    /*IF (PRICEPARAM = 0 OR NEWPRICE < PRICE) THEN*/
    BEGIN
        NEWPRICE = ROUND_CEIL(PRICE * (1 + PRICEPER / 100), PRICERND);
        NEWPRICE2 = ROUND_CEIL(PRICE * (1 + PRICEPER2 / 100), PRICERND2);
        NEWPRICE3 = ROUND_CEIL(PRICE * (1 + PRICEPER3 / 100), PRICERND3);
    END
    
    /*insert record*/
    INSERT INTO DOC_PROD (DOCID, RECID, INDOCID, INRECID, PRODID, CNT, UNIT, INPRICE, INNDSPRICE, OUTPRICE, PRICE, NDSPRICE, NALOGSUM, NEWPRICE, NEWPRICE2, NEWPRICE3)
    VALUES (:DOCID, :RECID, :INDOCID, :INRECID, :PRODID, :CNT, :INUNIT, :INPRICE, :INNDSPRICE, :INOUTPRICE, :PRICE, :NDSPRICE, 0, :NEWPRICE, :NEWPRICE2, :NEWPRICE3);
  END

  /*update record*/
  ELSE BEGIN
    CNT = CNT * (UNIT / INUNIT);
    UPDATE DOC_PROD SET CNT = CNT + :CNT
    WHERE DOCID = :DOCID AND RECID = :RECID;
  END

  /*update document*/
  SUM0 = ROUND_CURR(CNT * INUNIT * PRICE);
  SUM1 = ROUND_CURR(CNT * INUNIT * NDSPRICE);
  UPDATE DOC SET SUM0 = SUM0 + :SUM0, SUM1 = SUM1 + :SUM1 WHERE DOCID = :DOCID;
END
^


ALTER PROCEDURE UPDATE_OSTATOK_PRICE (
    CLIENTID INTEGER,
    PER DOUBLE PRECISION,
    FINPRICE INTEGER,
    PRICEINFO INTEGER)
AS
DECLARE VARIABLE PRICERND INTEGER;
DECLARE VARIABLE PRICERND2 INTEGER;
DECLARE VARIABLE PRICERND3 INTEGER;
DECLARE VARIABLE DOCID INTEGER;
DECLARE VARIABLE RECID INTEGER;
DECLARE VARIABLE INPRICE DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE2 DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE3 DOUBLE PRECISION;
BEGIN
  SELECT PRICE_ROUND, PRICE_ROUND2, PRICE_ROUND3 FROM SKLAD WHERE CLIENTID=:CLIENTID INTO :PRICERND, :PRICERND2, :PRICERND3;
  IF (PRICERND IS NULL OR PRICERND = 0) THEN PRICERND = 100;
  IF (PRICERND2 IS NULL OR PRICERND2 = 0) THEN PRICERND2 = 100;
  IF (PRICERND3 IS NULL OR PRICERND3 = 0) THEN PRICERND3 = 100;
  IF (FINPRICE IS NULL) THEN FINPRICE = 0;
  
  FOR SELECT DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.PRICE, DOC_PROD.NEWPRICE, DOC_PROD.NEWPRICE2, DOC_PROD.NEWPRICE3
  FROM DOC_PROD
  INNNER JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID AND DOC.CLIENTID2 = :CLIENTID AND DOC.KIND = 1
  WHERE DOC_PROD.KIND = 0
  INTO :DOCID, :RECID, :INPRICE, :NEWPRICE, :NEWPRICE2, :NEWPRICE3
  DO BEGIN
    IF (BIT_AND(PRICEINFO, 1) <> 0) THEN BEGIN
      IF (FINPRICE <> 0) THEN NEWPRICE = INPRICE;
      NEWPRICE = ROUND_CEIL(NEWPRICE * ((100 + PER) / 100), PRICERND);
    END

    IF (BIT_AND(PRICEINFO, 2) <> 0) THEN BEGIN
      IF (FINPRICE <> 0) THEN NEWPRICE2 = INPRICE;
      NEWPRICE2 = ROUND_CEIL(NEWPRICE2 * ((100 + PER) / 100), PRICERND2);
    END

    IF (BIT_AND(PRICEINFO, 4) <> 0) THEN BEGIN
      IF (FINPRICE <> 0) THEN NEWPRICE3 = INPRICE;
      NEWPRICE3 = ROUND_CEIL(NEWPRICE3 * ((100 + PER) / 100), PRICERND3);
    END

    UPDATE DOC_PROD SET NEWPRICE = :NEWPRICE, NEWPRICE2 = :NEWPRICE2, NEWPRICE3 = :NEWPRICE3 WHERE DOCID = :DOCID AND RECID = :RECID;
  END
END
^


ALTER PROCEDURE CREATE_DOC_PRODUCT (
    PDOCID INTEGER)
RETURNS (
    DOCID INTEGER)
AS
DECLARE VARIABLE E DOUBLE PRECISION;
DECLARE VARIABLE CLIENTID1 INTEGER;
DECLARE VARIABLE CLIENTID2 INTEGER;
DECLARE VARIABLE PRECID INTEGER;
DECLARE VARIABLE PCNT DOUBLE PRECISION;
DECLARE VARIABLE PARAM1 INTEGER;
DECLARE VARIABLE PRICEPER DOUBLE PRECISION;
DECLARE VARIABLE PRICEPER2 DOUBLE PRECISION;
DECLARE VARIABLE PRICEPER3 DOUBLE PRECISION;
DECLARE VARIABLE PRICERND INTEGER;
DECLARE VARIABLE PRICERND2 INTEGER;
DECLARE VARIABLE PRICERND3 INTEGER;
DECLARE VARIABLE RECID INTEGER;
DECLARE VARIABLE INDOCID INTEGER;
DECLARE VARIABLE INRECID INTEGER;
DECLARE VARIABLE PRODID INTEGER;
DECLARE VARIABLE CNT DOUBLE PRECISION;
DECLARE VARIABLE UNIT DOUBLE PRECISION;
DECLARE VARIABLE INPRICE DOUBLE PRECISION;
DECLARE VARIABLE INNDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE OUTPRICE DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE2 DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE3 DOUBLE PRECISION;
DECLARE VARIABLE NDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE NDS DOUBLE PRECISION;
DECLARE VARIABLE SUM0 DOUBLE PRECISION;
DECLARE VARIABLE SUM1 DOUBLE PRECISION;
BEGIN
  E = 0.00001;
  SELECT CLIENTID1, CLIENTID2 FROM DOC WHERE DOCID = :PDOCID INTO :CLIENTID1, :CLIENTID2;

  SELECT DOCPARAM1
    FROM SKLAD WHERE CLIENTID = :CLIENTID1 INTO :PARAM1;

  SELECT PRICE_PERCENT, PRICE_PERCENT2, PRICE_PERCENT3, PRICE_ROUND, PRICE_ROUND2, PRICE_ROUND3
    FROM SKLAD WHERE CLIENTID = :CLIENTID2 INTO :PRICEPER, :PRICEPER2, :PRICEPER3, :PRICERND, :PRICERND2, :PRICERND3;


  IF (PRICEPER IS NULL) THEN PRICEPER = 0;
  IF (PRICEPER2 IS NULL) THEN PRICEPER2 = 0;
  IF (PRICEPER3 IS NULL) THEN PRICEPER3 = 0;
  IF (PRICERND IS NULL OR PRICERND = 0) THEN PRICERND = 100;  
  IF (PRICERND2 IS NULL OR PRICERND2 = 0) THEN PRICERND2 = 100;
  IF (PRICERND3 IS NULL OR PRICERND3 = 0) THEN PRICERND3 = 100;
  RECID = 0;
  SUM0 = 0;
  SUM1 = 0;
  
  FOR SELECT RECID, PRODID, UNIT * (CNT - RCNT - UCNT)
  FROM DOC_PROD
  WHERE DOCID = :PDOCID AND CNT > RCNT 
  ORDER BY RECID
  INTO :PRECID, :PRODID, :PCNT
  DO BEGIN
  
    FOR SELECT DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.UNIT, DOC_PROD.CNT - DOC_PROD.RCNT - DOC_PROD.UCNT, DOC_PROD.PRICE, DOC_PROD.NDSPRICE, DOC_PROD.NEWPRICE, PRODUCT.NDS
    FROM DOC_PROD
    INNNER JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID AND DOC.CLIENTID2 = :CLIENTID1 AND DOC.KIND = 1
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    WHERE DOC_PROD.KIND = 0 AND DOC_PROD.PRODID = :PRODID
    INTO :INDOCID, :INRECID, :UNIT, :CNT, :INPRICE, :INNDSPRICE, :OUTPRICE, :NDS
    DO IF (PCNT > E AND CNT > E) THEN BEGIN

      IF (CNT * UNIT >= PCNT) THEN BEGIN
        CNT = PCNT / UNIT;
        PCNT = 0;
      END 
      ELSE BEGIN
        PCNT = PCNT - CNT * UNIT;
      END

      IF (NDS IS NULL) THEN NDS = 0;
      IF (BIT_AND(PARAM1, 2) = 2) /*check nds*/
        THEN NDSPRICE = OUTPRICE * (NDS / (100 + NDS));
        ELSE NDSPRICE = 0;
      NEWPRICE = ROUND_CEIL(OUTPRICE * (1 + PRICEPER / 100), PRICERND);
      NEWPRICE2 = ROUND_CEIL(OUTPRICE * (1 + PRICEPER2 / 100), PRICERND2);
      NEWPRICE3 = ROUND_CEIL(OUTPRICE * (1 + PRICEPER3 / 100), PRICERND3);

      IF (DOCID IS NULL) THEN DOCID = GEN_ID(GENDOCID, 1);
      RECID = RECID + 10;

      INSERT INTO DOC_PROD (DOCID, CLIENTID2, RECID, KIND, INDOCID, INRECID, PRODID, UNIT, CNT, INPRICE, INNDSPRICE, OUTPRICE, PRICE, NDSPRICE, NEWPRICE, NEWPRICE2, NEWPRICE3, NALOGSUM)
      VALUES (:DOCID, :CLIENTID2, :RECID, 1, :INDOCID, :INRECID, :PRODID, :UNIT, :CNT, :INPRICE, :INNDSPRICE, :OUTPRICE, :OUTPRICE, :NDSPRICE, :NEWPRICE, :NEWPRICE2, :NEWPRICE3, 0);

      SUM0 = SUM0 + ROUND_CURR(OUTPRICE * CNT * UNIT);
      SUM1 = SUM1 + ROUND_CURR(NDSPRICE * CNT * UNIT);
    END
  END

  IF (DOCID IS NOT NULL) THEN
    INSERT INTO DOC (DOCID, CLIENTID1, CLIENTID2, KIND, SKIND, PARAM1, SUM0, SUM1, SUM2)
    VALUES (:DOCID, :CLIENTID1, :CLIENTID2, 257, 0, BIT_AND(:PARAM1, 2), :SUM0, :SUM1, 0);

END
^


ALTER PROCEDURE CREATE_DOC_PRODUCT2 (
    CLIENTID INTEGER)
RETURNS (
    DOCID INTEGER)
AS
DECLARE VARIABLE E DOUBLE PRECISION;
DECLARE VARIABLE PARAM1 INTEGER;
DECLARE VARIABLE RECID INTEGER;
DECLARE VARIABLE INDOCID INTEGER;
DECLARE VARIABLE INRECID INTEGER;
DECLARE VARIABLE PRODID INTEGER;
DECLARE VARIABLE CNT DOUBLE PRECISION;
DECLARE VARIABLE UNIT DOUBLE PRECISION;
DECLARE VARIABLE INPRICE DOUBLE PRECISION;
DECLARE VARIABLE INNDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE OUTPRICE DOUBLE PRECISION;
DECLARE VARIABLE NDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE NDS DOUBLE PRECISION;
DECLARE VARIABLE SUM0 DOUBLE PRECISION;
DECLARE VARIABLE SUM1 DOUBLE PRECISION;
BEGIN
  E=0.00001;  

  SELECT DOCPARAM1
    FROM SKLAD WHERE CLIENTID = :CLIENTID INTO :PARAM1;
  RECID = 0;
  SUM0 = 0;
  SUM1 = 0;
  
  FOR SELECT DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.PRODID, DOC_PROD.UNIT, DOC_PROD.CNT - DOC_PROD.RCNT - DOC_PROD.UCNT, DOC_PROD.PRICE, DOC_PROD.NDSPRICE, DOC_PROD.NEWPRICE, PRODUCT.NDS
  FROM DOC_PROD
  INNNER JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID AND DOC.CLIENTID2 = :CLIENTID AND DOC.KIND = 1
  LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
  WHERE DOC_PROD.KIND = 0

  INTO :INDOCID, :INRECID, :PRODID, :UNIT, :CNT, :INPRICE, :INNDSPRICE, :OUTPRICE, :NDS
  DO IF (CNT > E) THEN BEGIN
    IF (NDS IS NULL) THEN NDS = 0;
    IF (BIT_AND(PARAM1, 2) = 2) /*check nds*/
      THEN NDSPRICE = OUTPRICE * (NDS / (100 + NDS));
      ELSE NDSPRICE = 0;

    IF (DOCID IS NULL) THEN DOCID = GEN_ID(GENDOCID, 1);
    RECID = RECID + 10;

    INSERT INTO DOC_PROD (DOCID, RECID, KIND, INDOCID, INRECID, PRODID, UNIT, CNT, INPRICE, INNDSPRICE, OUTPRICE, PRICE, NDSPRICE, NEWPRICE, NEWPRICE2, NEWPRICE3, NALOGSUM)
    VALUES (:DOCID, :RECID, 1, :INDOCID, :INRECID, :PRODID, :UNIT, :CNT, :INPRICE, :INNDSPRICE, :OUTPRICE, :OUTPRICE, :NDSPRICE, :OUTPRICE, :OUTPRICE, :OUTPRICE, 0);

    SUM0 = SUM0 + ROUND_CURR(OUTPRICE * CNT * UNIT);
    SUM1 = SUM1 + ROUND_CURR(NDSPRICE * CNT * UNIT);
  END

  IF (DOCID IS NOT NULL) THEN
    INSERT INTO DOC (DOCID, CLIENTID1, KIND, SKIND, PARAM1, SUM0, SUM1, SUM2)
    VALUES (:DOCID, :CLIENTID, 257, 0, BIT_AND(:PARAM1, 2), :SUM0, :SUM1, 0);
END
^


ALTER TRIGGER DOC_PROD_BEFOREINSERT
ACTIVE BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE RCNT DOUBLE PRECISION;
DECLARE VARIABLE UCNT DOUBLE PRECISION;
DECLARE VARIABLE CLIENTID1 INTEGER;
DECLARE VARIABLE PRICEPARAM INTEGER;
BEGIN
  /*IF (NEW.CNT < 0) THEN EXCEPTION E_UPDATE;*/
  IF (NEW.CNT IS NULL) THEN NEW.CNT = 0;
  IF (NEW.RCNT IS NULL) THEN NEW.RCNT = 0;
  IF (NEW.UCNT IS NULL) THEN NEW.UCNT = 0;
  IF (NEW.KIND = 0 AND NEW.CNT = NEW.RCNT) THEN NEW.KIND = NULL;
  ELSE IF (NEW.KIND IS NULL AND NEW.CNT > NEW.RCNT) THEN NEW.KIND = 0;

  /*read info about doc*/
  SELECT CLIENTID1, CLIENTID2, DATE1 FROM DOC
  WHERE DOCID = NEW.DOCID
  INTO CLIENTID1, NEW.CLIENTID2, NEW.DATE1;

  /*read info about client2*/
  SELECT PRICE_PARAM FROM SKLAD WHERE CLIENTID = NEW.CLIENTID2 INTO :PRICEPARAM;

  /*change ostatok*/
  IF (NEW.INDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0;
    UCNT = 0;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN RCNT = NEW.CNT * NEW.UNIT;
    ELSE IF (NEW.KIND = 1) THEN UCNT = NEW.CNT * NEW.UNIT;
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.INDOCID, NEW.INRECID, RCNT, UCNT;
  END ELSE BEGIN
    IF (NEW.CNT > 0 AND NEW.CNT < NEW.RCNT) THEN EXCEPTION E_UPDATE;
    IF (NEW.CNT < 0 AND NEW.CNT > NEW.RCNT) THEN EXCEPTION E_UPDATE;
  END

  /*vozvrat*/
  IF (NEW.PDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0;
    UCNT = 0;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN BEGIN
      RCNT = -NEW.CNT * NEW.UNIT;
      NEW.RCNT = NEW.CNT;
      NEW.KIND = NULL;
    END ELSE IF (NEW.KIND = 1) THEN BEGIN
      UCNT = -NEW.CNT * NEW.UNIT;
      NEW.UCNT = NEW.CNT;
    END
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.PDOCID, NEW.PRECID, RCNT, UCNT;
  END

  /*update product price*/
  IF (NEW.PRODID IS NOT NULL AND BIT_AND(PRICEPARAM, 1) <> 0) THEN
    UPDATE PRODUCT SET PRICE = NEW.NEWPRICE, PRICE2 = NEW.NEWPRICE2, PRICE3 = NEW.NEWPRICE3 WHERE PRODID = NEW.PRODID;
END
^


ALTER TRIGGER DOC_PROD_BEFOREUPDATE
ACTIVE BEFORE UPDATE POSITION 0
AS
DEClARE VARIABLE E DOUBLE PRECISION;  
DECLARE VARIABLE RCNT DOUBLE PRECISION;
DEClARE VARIABLE OST DOUBLE PRECISION;  
DECLARE VARIABLE UCNT DOUBLE PRECISION;
DECLARE VARIABLE CLIENTID1 INTEGER;
DECLARE VARIABLE PRICEPARAM INTEGER;
BEGIN
  E = 0.00001;

  IF (NEW.DOCID <> OLD.DOCID OR NEW.RECID <> OLD.RECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.INDOCID <> OLD.INDOCID OR NEW.INRECID <> OLD.INRECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.PDOCID <> OLD.PDOCID OR NEW.PRECID <> OLD.PRECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.CNT IS NULL) THEN NEW.CNT = 0;
  IF (NEW.RCNT IS NULL) THEN NEW.RCNT = 0;
  IF (NEW.UCNT IS NULL) THEN NEW.UCNT = 0;
  /*IF (NEW.CNT < NEW.RCNT + NEW.UCNT OR (NEW.KIND = 1 AND NEW.RCNT + NEW.UCNT > 0)) THEN EXCEPTION E_UPDATE;*/

  /*read info about doc*/
  SELECT CLIENTID1, CLIENTID2, DATE1 FROM DOC
  WHERE DOCID = NEW.DOCID
  INTO CLIENTID1, NEW.CLIENTID2, NEW.DATE1;

  /*read info about client2*/
  SELECT PRICE_PARAM FROM SKLAD WHERE CLIENTID = NEW.CLIENTID2 INTO :PRICEPARAM;

  /*calculate ostatok*/
  OST = NEW.CNT - NEW.RCNT;
  IF (NEW.KIND = 0 AND OST > -E AND OST < E) THEN BEGIN
    NEW.KIND = NULL;
    NEW.RCNT = NEW.CNT;
    OST = 0;
  END ELSE IF (NEW.KIND IS NULL AND (OST < -E OR OST > E) ) THEN BEGIN
    NEW.KIND = 0;
  END

  /*change ostatok*/
  IF (NEW.INDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0; UCNT = 0;
    IF (OLD.KIND IS NULL OR OLD.KIND = 0) THEN RCNT = RCNT - OLD.CNT * OLD.UNIT;
    ELSE IF (OLD.KIND = 1) THEN UCNT = UCNT - OLD.CNT * OLD.UNIT;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN RCNT = RCNT + NEW.CNT * NEW.UNIT;
    ELSE IF (NEW.KIND = 1) THEN UCNT = UCNT + NEW.CNT * NEW.UNIT;
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.INDOCID, NEW.INRECID, RCNT, UCNT;
    /*
  END ELSE BEGIN
    IF (NEW.CNT > 0 AND OST < -E) THEN EXCEPTION E_UPDATE;
    IF (NEW.CNT < 0 AND OST > E) THEN EXCEPTION E_UPDATE;
    */
  END

  /*vozvrat*/
  IF (NEW.PDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0; UCNT = 0;
    IF (OLD.KIND IS NULL OR OLD.KIND = 0) THEN RCNT = RCNT + OLD.CNT * OLD.UNIT;
    ELSE IF (OLD.KIND = 1) THEN UCNT = UCNT + OLD.CNT * OLD.UNIT;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN BEGIN
      RCNT = RCNT - NEW.CNT * NEW.UNIT;
      NEW.RCNT = NEW.CNT;
      NEW.KIND = NULL;
    END ELSE IF (NEW.KIND = 1) THEN BEGIN
      UCNT = UCNT - NEW.CNT * NEW.UNIT;
      NEW.UCNT = NEW.CNT;
    END
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.PDOCID, NEW.PRECID, RCNT, UCNT;
  END

  /*update inprice and inndsprice*/
  IF (NEW.PRICE <> OLD.PRICE OR NEW.NDSPRICE <> OLD.NDSPRICE) THEN
    UPDATE DOC_PROD SET INPRICE = NEW.PRICE, INNDSPRICE = NEW.NDSPRICE WHERE INDOCID = NEW.DOCID AND INRECID = NEW.RECID;

  /*update product price*/
  IF (NEW.PRODID IS NOT NULL AND BIT_AND(PRICEPARAM, 1) <> 0) THEN
    UPDATE PRODUCT SET PRICE = NEW.NEWPRICE, PRICE2 = NEW.NEWPRICE2, PRICE3 = NEW.NEWPRICE3 WHERE PRODID = NEW.PRODID;
END
^


ALTER TRIGGER DOC_BEFOREUPDATE
AS
DECLARE VARIABLE DIFF DOUBLE PRECISION;
BEGIN
  /* correct field values */
  IF (NEW.CLIENTID1 IS NULL) THEN NEW.CLIENTID1 = 0;
  IF (NEW.CLIENTID2 IS NULL) THEN NEW.CLIENTID2 = 0;
  IF (NEW.CLIENTID1 = NEW.CLIENTID2) THEN NEW.CLIENTID2 = 0;
  IF (NEW.SUM0 IS NULL) THEN NEW.SUM0 = 0;
  IF (NEW.OST IS NULL) THEN NEW.OST = 0;

  /* test field values */
  /*IF (OLD.KIND>512) THEN EXCEPTION E_ARCHIV;*/
  IF (OLD.DOCID <> NEW.DOCID) THEN EXCEPTION E_FIELD_UPDATE;
  IF (OLD.CLIENTID1 <> NEW.CLIENTID1) THEN BEGIN
    /* except sklad */
    IF (EXISTS(SELECT * FROM DOC_PROD WHERE DOCID = OLD.DOCID)) THEN
    IF (EXISTS(SELECT * FROM SKLAD WHERE CLIENTID = NEW.CLIENTID1 OR CLIENTID = OLD.CLIENTID1))
    /*IF (EXISTS(SELECT * FROM DOC_PROD WHERE DOCID = OLD.DOCID AND INDOCID IS NOT NULL))*/
    THEN EXCEPTION E_FIELD_UPDATE;
  END
  IF (OLD.CLIENTID2 <> NEW.CLIENTID2) THEN BEGIN
    IF (EXISTS(SELECT * FROM DOC_PROD WHERE INDOCID = OLD.DOCID)) THEN EXCEPTION E_FIELD_UPDATE;
  END

  /*update doc no*/
  EXECUTE PROCEDURE UPDATE_DOCNO OLD.CLIENTID1,OLD.KIND,OLD.SKIND,OLD.DOCNO,OLD.SUM0,1 RETURNING_VALUES OLD.DOCNO;
  EXECUTE PROCEDURE UPDATE_DOCNO NEW.CLIENTID1,NEW.KIND,NEW.SKIND,NEW.DOCNO,NEW.SUM0,0 RETURNING_VALUES NEW.DOCNO;

  /*update debit*/
  IF ((OLD.KIND < 256 AND NEW.KIND > 256) OR (OLD.CLIENTID1 <> NEW.CLIENTID1) OR (OLD.CLIENTID2 <> NEW.CLIENTID2)) THEN BEGIN
    /*delete debit*/
    DIFF = OLD.OST - OLD.SUM0;
    EXECUTE PROCEDURE UPDATE_DEBIT_UNDO OLD.DOCID, OLD.PDOCID, OLD.CLIENTID1, OLD.CLIENTID2, :DIFF;
    NEW.OST = NEW.SUM0;
  END 
  ELSE IF ((OLD.KIND > 256 AND NEW.KIND < 256) OR (OLD.CLIENTID1 <> NEW.CLIENTID1) OR (OLD.CLIENTID2 <> NEW.CLIENTID2)) THEN BEGIN
    /*insert debit*/
    EXECUTE PROCEDURE UPDATE_DEBIT NEW.DOCID, NEW.PDOCID, NEW.CLIENTID1, NEW.CLIENTID2, NEW.SUM0
    RETURNING_VALUES NEW.OST;    
  END 
  ELSE IF (NEW.KIND < 256) THEN BEGIN
    /*update debit*/
    IF (OLD.SUM0 IS NULL) THEN DIFF = NEW.SUM0; ELSE DIFF=NEW.SUM0-OLD.SUM0;
    IF (DIFF<>0) THEN BEGIN
      IF (OLD.OST IS NULL) THEN NEW.OST = DIFF; ELSE NEW.OST = OLD.OST+DIFF;
      EXECUTE PROCEDURE UPDATE_DEBIT NEW.DOCID, NEW.PDOCID, NEW.CLIENTID1, NEW.CLIENTID2, NEW.OST
      RETURNING_VALUES NEW.OST;
      DIFF = 0;
      IF (NEW.SUM0 > 0) THEN BEGIN
        IF (NEW.OST < 0) THEN BEGIN
          DIFF = NEW.OST;
          NEW.OST = 0;
        END 
        ELSE IF (NEW.OST > NEW.SUM0) THEN BEGIN
          DIFF = NEW.OST - NEW.SUM0;
          NEW.OST = NEW.SUM0;
        END
      END 
      ELSE BEGIN
        IF (NEW.OST > 0) THEN BEGIN
          DIFF = NEW.OST;
          NEW.OST = 0;          
        END 
        ELSE IF (NEW.OST < NEW.SUM0) THEN BEGIN
          DIFF = NEW.OST - NEW.SUM0;
          NEW.OST = NEW.SUM0;
        END
      END
      IF (DIFF <> 0) THEN EXECUTE PROCEDURE UPDATE_DEBIT_UNDO NEW.DOCID, NEW.PDOCID, NEW.CLIENTID1, NEW.CLIENTID2, :DIFF;
    END
  END
  ELSE BEGIN
    NEW.OST = NEW.SUM0;
  END

  /*update doc_prod*/
  IF (NEW.CLIENTID2 <> OLD.CLIENTID2 OR NEW.DATE1 <> OLD.DATE1) THEN
    UPDATE DOC_PROD SET CLIENTID2 = NEW.CLIENTID2, DATE1 = NEW.DATE1 WHERE DOCID = NEW.DOCID;
END
^

SET TERM ; ^

update product set nds = 18 where nds <> 10;

COMMIT WORK;
EXECUTE PROCEDURE GET_VERSION(1);
COMMIT WORK;