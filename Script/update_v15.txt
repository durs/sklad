
SET TERM ^;

ALTER PROCEDURE QUERY_OSTATOK 
(
  ID INTEGER,
  ID2 INTEGER
)
RETURNS
(
  INDOCID INTEGER,
  INRECID INTEGER,
  PDOCID INTEGER,
  PRECID INTEGER,
  PRODID INTEGER,
  DATE1 TIMESTAMP,
  CNT DOUBLE PRECISION,
  UNIT DOUBLE PRECISION,
  INPRICE DOUBLE PRECISION,
  INNDSPRICE DOUBLE PRECISION,
  OUTPRICE DOUBLE PRECISION,
  PRODUCTNAME VARCHAR(50) CHARACTER SET WIN1251,
  CLASSNAME VARCHAR(10) CHARACTER SET WIN1251,
  PRODUSERNAME VARCHAR(10) CHARACTER SET WIN1251,
  PRODUCT VARCHAR(100) CHARACTER SET WIN1251,
  DIM VARCHAR(10) CHARACTER SET WIN1251,
  LEN VARCHAR(10) CHARACTER SET WIN1251,
  WEIGHT FLOAT,
  LASTPRICE DOUBLE PRECISION,
  NDS FLOAT,
  COUNTRY VARCHAR(50) CHARACTER SET WIN1251,
  NTD BLOB,
  SERTIFICAT BLOB,
  COMMENT BLOB
)
AS
BEGIN
  IF (ID IS NULL) THEN
    FOR SELECT
      PRODUCT.PRODID, PRODUCT.UNIT, PRODUCT.NDS, PRODUCT.NAME, PRODUCT.DIM, PRODUCT.LEN, PRODUCT.WEIGHT, PRODUCT.PRICE, PRODUCT.COMMENT, PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME, PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME, CLASS.SMALLNAME, PRODUSER.SMALLNAME, PRODUCT.LEN)
    FROM PRODUCT
    LEFT JOIN CLASS ON CLASS.CLASSID = PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID = PRODUCT.PRODUSERID
    ORDER BY PRODUCT.NAME, PRODUCT.CLASSID, PRODUCT.PRODUSERID, PRODUCT.LEN
    INTO :PRODID, :UNIT, :NDS, :PRODUCTNAME, :DIM, :LEN, :WEIGHT, :LASTPRICE, :COMMENT, :SERTIFICAT, :CLASSNAME, :PRODUSERNAME, :COUNTRY, :PRODUCT
    DO SUSPEND;
  ELSE IF (ID2 IS NULL) THEN
    FOR SELECT
      DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.PRODID, DOC_PROD.CNT - DOC_PROD.RCNT - DOC_PROD.UCNT, DOC_PROD.UNIT, DOC_PROD.PRICE, DOC_PROD.NDSPRICE, DOC_PROD.NEWPRICE, DOC_PROD.NTD, DOC_PROD.COMMENT,
      DOC_PROD.DATE1,
      PRODUCT.NDS, PRODUCT.NAME, PRODUCT.DIM, PRODUCT.LEN, PRODUCT.WEIGHT, PRODUCT.PRICE, PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME, PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME, CLASS.SMALLNAME, PRODUSER.SMALLNAME, PRODUCT.LEN)
    FROM DOC_PROD
    /*INNER JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID AND DOC.CLIENTID2=:ID AND DOC.KIND=1*/
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    LEFT JOIN CLASS ON CLASS.CLASSID = PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID = PRODUCT.PRODUSERID
    WHERE DOC_PROD.KIND = 0 AND DOC_PROD.CLIENTID2 = :ID
    ORDER BY PRODUCT.NAME, PRODUCT.CLASSID, PRODUCT.PRODUSERID, PRODUCT.LEN, DOC_PROD.DATE1
    INTO :INDOCID, :INRECID, :PRODID, :CNT, :UNIT, :INPRICE, :INNDSPRICE, :OUTPRICE, :NTD, :COMMENT, :DATE1, :NDS, :PRODUCTNAME, :DIM, :LEN, :WEIGHT, :LASTPRICE, :SERTIFICAT, :CLASSNAME, :PRODUSERNAME, :COUNTRY, :PRODUCT
    DO SUSPEND;
  ELSE
    FOR SELECT
      DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.INDOCID, DOC_PROD.INRECID,
      DOC_PROD.PRODID, DOC_PROD.CNT - DOC_PROD.RCNT - DOC_PROD.UCNT, DOC_PROD.UNIT, DOC_PROD.INPRICE, DOC_PROD.INNDSPRICE, DOC_PROD.PRICE, DOC_PROD.NTD, DOC_PROD.COMMENT,
      DOC.DATE1,
      PRODUCT.NDS, PRODUCT.NAME, PRODUCT.DIM, PRODUCT.LEN, PRODUCT.WEIGHT, PRODUCT.PRICE, PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME, PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME, CLASS.SMALLNAME, PRODUSER.SMALLNAME, PRODUCT.LEN)
    FROM DOC_PROD
    INNER JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID AND DOC.CLIENTID1 = :ID AND DOC.CLIENTID2 = :ID2 AND DOC.KIND = 1
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    LEFT JOIN CLASS ON CLASS.CLASSID = PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID = PRODUCT.PRODUSERID
    WHERE DOC_PROD.KIND = 0
    ORDER BY PRODUCT.NAME, PRODUCT.CLASSID, PRODUCT.PRODUSERID, PRODUCT.LEN, DOC.DATE1 DESC
    INTO :PDOCID, :PRECID, :INDOCID, :INRECID, :PRODID, :CNT, :UNIT, :INPRICE, :INNDSPRICE, :OUTPRICE, :NTD, :COMMENT, :DATE1, :NDS, :PRODUCTNAME, :DIM, :LEN, :WEIGHT, :LASTPRICE, :SERTIFICAT, :CLASSNAME, :PRODUSERNAME, :COUNTRY, :PRODUCT
    DO SUSPEND;
END
 ^


ALTER PROCEDURE QUERY_OSTATOK2 
(
  CLIENTID INTEGER,
  FIRSTDOCDATE TIMESTAMP,
  FIRSTDATE TIMESTAMP,
  LASTDATE TIMESTAMP
)
RETURNS
(
  INDOCID INTEGER,
  INRECID INTEGER,
  PRODID INTEGER,
  INCNT DOUBLE PRECISION,
  OUTCNT DOUBLE PRECISION,
  CNT DOUBLE PRECISION,
  VCNT DOUBLE PRECISION,
  UNIT DOUBLE PRECISION,
  INPRICE DOUBLE PRECISION,
  INNDSPRICE DOUBLE PRECISION,
  OUTPRICE DOUBLE PRECISION,
  OUTSUM DOUBLE PRECISION,
  OUTNDSSUM DOUBLE PRECISION,
  OUTNALOGSUM DOUBLE PRECISION,
  ISOST SMALLINT
)
AS
DECLARE VARIABLE E DOUBLE PRECISION;
DECLARE VARIABLE KIND INTEGER;
DECLARE VARIABLE RCNT DOUBLE PRECISION;
DECLARE VARIABLE INNERCNT DOUBLE PRECISION;
DECLARE VARIABLE PRICE DOUBLE PRECISION;
DECLARE VARIABLE NDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE DATE1 DATE;
BEGIN
  E=0.00001;
  SELECT KIND FROM SKLAD WHERE CLIENTID=:CLIENTID INTO :KIND;
  IF (KIND IS NULL) THEN KIND=0;

  FOR SELECT DOC.DATE1, DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.PRODID,
    DOC_PROD.CNT, DOC_PROD.UNIT, 
    DOC_PROD.INPRICE, DOC_PROD.INNDSPRICE, DOC_PROD.PRICE, DOC_PROD.NDSPRICE, DOC_PROD.NEWPRICE
    FROM DOC,DOC_PROD
    WHERE DOC.CLIENTID2=:CLIENTID AND DOC.KIND=1
    AND (:FIRSTDOCDATE IS NULL OR DOC.DATE1>=:FIRSTDOCDATE) AND (:LASTDATE IS NULL OR DOC.DATE1<=:LASTDATE)
    AND DOC_PROD.DOCID=DOC.DOCID
    ORDER BY 1,2,3,4
    INTO :DATE1, :INDOCID, :INRECID, :PRODID, :INCNT, :UNIT, :INPRICE, :INNDSPRICE, :PRICE, :NDSPRICE, :OUTPRICE
  DO IF (INCNT>=0 OR DATE1>=FIRSTDATE) THEN BEGIN
    IF (KIND<>1) THEN BEGIN
      INPRICE=:PRICE;
      INNDSPRICE=:NDSPRICE;
    END
    IF (DATE1<FIRSTDATE) THEN ISOST=1; ELSE ISOST=0;

    /*GET VOZVRAT COUNT*/
    IF (FIRSTDATE IS NOT NULL) THEN 
      SELECT SUM(DOC_PROD.CNT*DOC_PROD.UNIT)
      FROM DOC_PROD
      LEFT JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID
      WHERE DOC_PROD.PDOCID=:INDOCID AND DOC_PROD.PRECID=:INRECID
      AND (DOC.DATE1<:FIRSTDATE) AND DOC.KIND=1
      INTO :VCNT;
    ELSE VCNT=0;
    IF (VCNT IS NULL) THEN VCNT=0; ELSE VCNT=VCNT/UNIT;

    /*GET INNER RELEASE COUNT*/
    /*MUST BE DELETED
    SELECT SUM(DOC_PROD.CNT*DOC_PROD.UNIT)
      FROM DOC_PROD
      LEFT JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID
      WHERE DOC_PROD.INDOCID=:INDOCID AND DOC_PROD.INRECID=:INRECID
      AND DOC.KIND=1 AND DOC.SKIND<=0
      INTO :INNERCNT;
    IF (INNERCNT IS NULL) THEN INNERCNT=0; ELSE INNERCNT=INNERCNT/UNIT;
    */

    /*GET ALL RELEASE COUNT*/
    SELECT SUM(DOC_PROD.CNT*DOC_PROD.UNIT)
      FROM DOC_PROD
      LEFT JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID
      WHERE DOC_PROD.INDOCID=:INDOCID AND DOC_PROD.INRECID=:INRECID
      AND (:LASTDATE IS NULL OR DOC.DATE1<=:LASTDATE) 
      AND DOC.KIND=1 
      INTO :RCNT;
    IF (RCNT IS NULL) THEN RCNT=0; ELSE RCNT=RCNT/UNIT;
    CNT=INCNT-RCNT;

    /*GET RELEASE COUNT*/
    IF ((RCNT<>0) AND (FIRSTDATE IS NOT NULL)) THEN BEGIN
      SELECT SUM(DOC_PROD.CNT*DOC_PROD.UNIT),
        SUM(ROUND_CURR(DOC_PROD.CNT*DOC_PROD.UNIT*DOC_PROD.PRICE)), SUM(ROUND_CURR(DOC_PROD.CNT*DOC_PROD.UNIT*DOC_PROD.NDSPRICE)), SUM(DOC_PROD.NALOGSUM)
        FROM DOC_PROD
        LEFT JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID
        WHERE DOC_PROD.INDOCID=:INDOCID AND DOC_PROD.INRECID=:INRECID
        AND DOC.DATE1>=:FIRSTDATE AND (:LASTDATE IS NULL OR DOC.DATE1<=:LASTDATE) 
        AND DOC.KIND=1 /* AND DOC.SKIND>0 */
        INTO :OUTCNT,:OUTSUM,:OUTNDSSUM,:OUTNALOGSUM;
      IF (OUTCNT IS NULL) THEN OUTCNT=0; ELSE OUTCNT=OUTCNT/UNIT;
      IF (OUTSUM IS NULL) THEN OUTSUM=0;
      IF (OUTNDSSUM IS NULL) THEN OUTNDSSUM=0;
      IF (OUTNALOGSUM IS NULL) THEN OUTNALOGSUM=0;
      INCNT=CNT+OUTCNT;
      IF (CNT+VCNT<-E OR CNT+VCNT>E OR OUTCNT<-E OR OUTCNT>E OR OUTSUM<-E OR OUTSUM>E) THEN SUSPEND;
    END ELSE BEGIN
      OUTCNT=0; OUTSUM=0; OUTNDSSUM=0; OUTNALOGSUM=0;
      IF (CNT+VCNT<-E OR CNT+VCNT>E) THEN SUSPEND;
    END
  END
END
 ^


SET TERM ;^

COMMIT WORK;
EXECUTE PROCEDURE GET_VERSION(1);
COMMIT WORK;