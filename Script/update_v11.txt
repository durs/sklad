SET TERM ^;




DROP TRIGGER DOC_PROD_BEFOREINSERT^

CREATE TRIGGER DOC_PROD_BEFOREINSERT FOR DOC_PROD BEFORE INSERT POSITION 0 AS
DECLARE VARIABLE RCNT DOUBLE PRECISION;
DECLARE VARIABLE UCNT DOUBLE PRECISION;
BEGIN
  /*IF (NEW.CNT < 0) THEN EXCEPTION E_UPDATE;*/
  IF (NEW.CNT IS NULL) THEN NEW.CNT = 0;
  IF (NEW.RCNT IS NULL) THEN NEW.RCNT = 0;
  IF (NEW.UCNT IS NULL) THEN NEW.UCNT = 0;
  IF (NEW.KIND = 0 AND NEW.CNT = NEW.RCNT) THEN NEW.KIND = NULL; 
  ELSE IF (NEW.KIND IS NULL AND NEW.CNT > NEW.RCNT) THEN NEW.KIND = 0;  

  SELECT CLIENTID2, DATE1 FROM DOC WHERE DOCID = NEW.DOCID INTO NEW.CLIENTID2, NEW.DATE1;

  IF (NEW.INDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0;
    UCNT = 0;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN RCNT = NEW.CNT * NEW.UNIT;
    ELSE IF (NEW.KIND = 1) THEN UCNT = NEW.CNT * NEW.UNIT;
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.INDOCID, NEW.INRECID, RCNT, UCNT;
  END ELSE BEGIN
    IF (NEW.CNT < NEW.RCNT) THEN EXCEPTION E_UPDATE; 
  END

  /*vozvrat*/ 
  IF (NEW.PDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0;
    UCNT = 0;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN BEGIN
      RCNT = -NEW.CNT * NEW.UNIT;
      NEW.RCNT = NEW.CNT;
      NEW.KIND = NULL;
    END ELSE IF (NEW.KIND = 1) THEN BEGIN
      UCNT = -NEW.CNT * NEW.UNIT;
      NEW.UCNT = NEW.CNT;
    END
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.PDOCID, NEW.PRECID, RCNT, UCNT;
  END
END^



DROP TRIGGER DOC_PROD_BEFOREUPDATE^

CREATE TRIGGER DOC_PROD_BEFOREUPDATE FOR DOC_PROD BEFORE UPDATE POSITION 0 AS
DEClARE VARIABLE E DOUBLE PRECISION;  DECLARE VARIABLE RCNT DOUBLE PRECISION;
DEClARE VARIABLE OST DOUBLE PRECISION;  DECLARE VARIABLE UCNT DOUBLE PRECISION;
BEGIN
  E = 0.00001;

  IF (NEW.DOCID <> OLD.DOCID OR NEW.RECID <> OLD.RECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.INDOCID <> OLD.INDOCID OR NEW.INRECID <> OLD.INRECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.PDOCID <> OLD.PDOCID OR NEW.PRECID <> OLD.PRECID) THEN EXCEPTION E_UPDATE;
  /*IF (NEW.CNT < 0 OR NEW.RCNT < 0 OR NEW.UCNT < 0) THEN EXCEPTION E_UPDATE;*/
  IF (NEW.CNT IS NULL) THEN NEW.CNT = 0;
  IF (NEW.RCNT IS NULL) THEN NEW.RCNT = 0;
  IF (NEW.UCNT IS NULL) THEN NEW.UCNT = 0;
  /*IF (NEW.CNT < NEW.RCNT + NEW.UCNT OR (NEW.KIND = 1 AND NEW.RCNT + NEW.UCNT > 0)) THEN EXCEPTION E_TEST;*/

  OST = NEW.CNT - NEW.RCNT;
  IF (NEW.KIND = 0 AND OST > -E AND OST < E) THEN NEW.KIND = NULL;
  ELSE IF (NEW.KIND IS NULL AND (OST < -E OR OST > E) ) THEN NEW.KIND = 0;

  IF (NEW.INDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0; UCNT = 0;
    IF (OLD.KIND IS NULL OR OLD.KIND = 0) THEN RCNT = RCNT - OLD.CNT * OLD.UNIT;
    ELSE IF (OLD.KIND = 1) THEN UCNT = UCNT - OLD.CNT * OLD.UNIT;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN RCNT = RCNT + NEW.CNT * NEW.UNIT;
    ELSE IF (NEW.KIND = 1) THEN UCNT = UCNT + NEW.CNT * NEW.UNIT;
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.INDOCID, NEW.INRECID, RCNT, UCNT;
  END ELSE BEGIN
    IF (OST < 0) THEN EXCEPTION E_UPDATE; 
  END

  /*vozvrat*/
  IF (NEW.PDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0; UCNT = 0;
    IF (OLD.KIND IS NULL OR OLD.KIND = 0) THEN RCNT = RCNT + OLD.CNT * OLD.UNIT;
    ELSE IF (OLD.KIND = 1) THEN UCNT = UCNT + OLD.CNT * OLD.UNIT;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN BEGIN
      RCNT = RCNT - NEW.CNT * NEW.UNIT;
      NEW.RCNT = NEW.CNT;
      NEW.KIND = NULL;
    END ELSE IF (NEW.KIND = 1) THEN BEGIN
      UCNT = UCNT - NEW.CNT * NEW.UNIT;
      NEW.UCNT = NEW.CNT;
    END
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.PDOCID, NEW.PRECID, RCNT, UCNT;
  END

  IF (NEW.PRICE <> OLD.PRICE OR NEW.NDSPRICE <> OLD.NDSPRICE) THEN
    UPDATE DOC_PROD SET INPRICE = NEW.PRICE, INNDSPRICE = NEW.NDSPRICE WHERE INDOCID = NEW.DOCID AND INRECID = NEW.RECID;
END^




SET TERM ;^

COMMIT WORK;
EXECUTE PROCEDURE GET_VERSION(1);
COMMIT WORK;