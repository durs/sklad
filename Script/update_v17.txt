SET TERM ^ ;

ALTER PROCEDURE QUERY_OSTATOK2 (
    CLIENTID INTEGER,
    FIRSTDOCDATE TIMESTAMP,
    FIRSTDATE TIMESTAMP,
    LASTDATE TIMESTAMP)
RETURNS (
    INDOCID INTEGER,
    INRECID INTEGER,
    PRODID INTEGER,
    INCNT DOUBLE PRECISION,
    OUTCNT DOUBLE PRECISION,
    CNT DOUBLE PRECISION,
    VCNT DOUBLE PRECISION,
    UNIT DOUBLE PRECISION,
    INPRICE DOUBLE PRECISION,
    INNDSPRICE DOUBLE PRECISION,
    OUTPRICE DOUBLE PRECISION,
    OUTSUM DOUBLE PRECISION,
    OUTNDSSUM DOUBLE PRECISION,
    OUTNALOGSUM DOUBLE PRECISION,
    ISOST SMALLINT)
AS
DECLARE VARIABLE E DOUBLE PRECISION;
DECLARE VARIABLE KIND INTEGER;
DECLARE VARIABLE RCNT DOUBLE PRECISION;
DECLARE VARIABLE INNERCNT DOUBLE PRECISION;
DECLARE VARIABLE PRICE DOUBLE PRECISION;
DECLARE VARIABLE NDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE DATE1 DATE;
BEGIN
  E = 0.00001;
  SELECT KIND FROM SKLAD WHERE CLIENTID = :CLIENTID INTO :KIND;
  IF (KIND IS NULL) THEN KIND = 0;

  FOR SELECT DOC.DATE1, DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.PRODID,
    DOC_PROD.CNT, DOC_PROD.UNIT, 
    DOC_PROD.INPRICE, DOC_PROD.INNDSPRICE, DOC_PROD.PRICE, DOC_PROD.NDSPRICE, DOC_PROD.NEWPRICE
    FROM DOC,DOC_PROD
    WHERE DOC.CLIENTID2 = :CLIENTID AND DOC.KIND = 1
    AND (:FIRSTDOCDATE IS NULL OR DOC.DATE1 >= :FIRSTDOCDATE) AND (:LASTDATE IS NULL OR DOC.DATE1 <= :LASTDATE)
    AND DOC_PROD.DOCID = DOC.DOCID
    ORDER BY 1, 2, 3, 4
    INTO :DATE1, :INDOCID, :INRECID, :PRODID, :INCNT, :UNIT, :INPRICE, :INNDSPRICE, :PRICE, :NDSPRICE, :OUTPRICE
  DO IF (INCNT >= 0 OR (FIRSTDATE IS NOT NULL AND DATE1 >= FIRSTDATE)) THEN BEGIN

    IF (KIND <> 1) THEN BEGIN
      INPRICE = :PRICE;
      INNDSPRICE = :NDSPRICE;
    END

    IF (FIRSTDATE IS NULL OR DATE1 < FIRSTDATE) THEN ISOST = 1; ELSE ISOST = 0;

    /*GET VOZVRAT COUNT BEFORE FIRSTDATE*/
    SELECT SUM(DOC_PROD.CNT * DOC_PROD.UNIT)
    FROM DOC_PROD
    LEFT JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID
    WHERE DOC_PROD.PDOCID = :INDOCID AND DOC_PROD.PRECID = :INRECID
    AND (:FIRSTDATE IS NULL OR DOC.DATE1 < :FIRSTDATE)
    AND (:LASTDATE IS NULL OR DOC.DATE1 < :LASTDATE)
    AND DOC.KIND = 1
    INTO :VCNT;
    IF (VCNT IS NULL) THEN VCNT = 0; ELSE VCNT = VCNT / UNIT;
    INCNT = INCNT + VCNT; /*Append 20.01.2004*/

    /*GET ALL RELEASE COUNT*/
    SELECT SUM(DOC_PROD.CNT * DOC_PROD.UNIT)
      FROM DOC_PROD
      LEFT JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID
      WHERE DOC_PROD.INDOCID = :INDOCID AND DOC_PROD.INRECID = :INRECID
      AND (:LASTDATE IS NULL OR DOC.DATE1 <= :LASTDATE)
      AND DOC.KIND = 1
      INTO :RCNT;
    IF (RCNT IS NULL) THEN RCNT = 0; ELSE RCNT = RCNT / UNIT;
    CNT = INCNT - RCNT;

    /*GET RELEASE COUNT AFTER FIRSTDATE*/
    IF (RCNT <> 0 AND FIRSTDATE IS NOT NULL) THEN BEGIN
      SELECT SUM(DOC_PROD.CNT * DOC_PROD.UNIT),
        SUM(ROUND_CURR(DOC_PROD.CNT * DOC_PROD.UNIT * DOC_PROD.PRICE)), SUM(ROUND_CURR(DOC_PROD.CNT * DOC_PROD.UNIT * DOC_PROD.NDSPRICE)), SUM(DOC_PROD.NALOGSUM)
        FROM DOC_PROD
        LEFT JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID
        WHERE DOC_PROD.INDOCID = :INDOCID AND DOC_PROD.INRECID = :INRECID
        AND DOC.DATE1 >= :FIRSTDATE AND (:LASTDATE IS NULL OR DOC.DATE1 <= :LASTDATE)
        AND DOC.KIND = 1 /* AND DOC.SKIND>0 */
        INTO :OUTCNT, :OUTSUM, :OUTNDSSUM, :OUTNALOGSUM;
      IF (OUTCNT IS NULL) THEN OUTCNT = 0; ELSE OUTCNT = OUTCNT / UNIT;
      IF (OUTSUM IS NULL) THEN OUTSUM = 0;
      IF (OUTNDSSUM IS NULL) THEN OUTNDSSUM = 0;
      IF (OUTNALOGSUM IS NULL) THEN OUTNALOGSUM = 0;
      INCNT = CNT + OUTCNT;
      IF (CNT/* + VCNT*/ < -E OR CNT/* + VCNT*/ > E OR OUTCNT < -E OR OUTCNT > E OR OUTSUM < -E OR OUTSUM > E) THEN SUSPEND;
      /*Correct 20.01.2004*/
    END ELSE BEGIN
      OUTCNT = 0; OUTSUM = 0; OUTNDSSUM = 0; OUTNALOGSUM = 0;
      IF (CNT/* + VCNT*/ < -E OR CNT/* + VCNT*/ > E) THEN SUSPEND;
      /*Correct 20.01.2004*/
    END
  END
END^

SET TERM ;^

COMMIT WORK;
EXECUTE PROCEDURE GET_VERSION(1);
COMMIT WORK;