SET TERM ^;

alter procedure CREATE_DOC_PRODUCT (PDOCID integer)
returns (DOCID integer)
as
DEClARE VARIABLE E DOUBLE PRECISION;   
DEClARE VARIABLE CLIENTID1 INTEGER;   
DEClARE VARIABLE CLIENTID2 INTEGER;   
DEClARE VARIABLE PRECID INTEGER;
DEClARE VARIABLE PCNT DOUBLE PRECISION;
DEClARE VARIABLE PARAM1 INTEGER;   
DEClARE VARIABLE PRICEPER DOUBLE PRECISION;   
DEClARE VARIABLE PRICERND INTEGER;   
DEClARE VARIABLE RECID INTEGER;
DEClARE VARIABLE INDOCID INTEGER;   
DEClARE VARIABLE INRECID INTEGER;   
DEClARE VARIABLE PRODID INTEGER;
DEClARE VARIABLE CNT DOUBLE PRECISION;
DEClARE VARIABLE UNIT DOUBLE PRECISION;   
DEClARE VARIABLE INPRICE DOUBLE PRECISION;   
DEClARE VARIABLE INNDSPRICE DOUBLE PRECISION;   
DEClARE VARIABLE OUTPRICE DOUBLE PRECISION;   
DEClARE VARIABLE NEWPRICE DOUBLE PRECISION;   
DEClARE VARIABLE NDSPRICE DOUBLE PRECISION;   
DEClARE VARIABLE NDS DOUBLE PRECISION;   
DEClARE VARIABLE SUM0 DOUBLE PRECISION;   
DEClARE VARIABLE SUM1 DOUBLE PRECISION;   
BEGIN
  E=0.00001;  
  SELECT CLIENTID1, CLIENTID2 FROM DOC WHERE DOCID = :PDOCID INTO :CLIENTID1, :CLIENTID2;

  SELECT DOCPARAM1, PRICE_PERCENT, PRICE_ROUND FROM SKLAD WHERE CLIENTID = :CLIENTID1 INTO :PARAM1, :PRICEPER, :PRICERND;
  IF (PRICEPER IS NULL) THEN PRICEPER = 0;
  IF (PRICERND IS NULL OR PRICERND = 0) THEN PRICERND = 100;  
  RECID = 0;
  SUM0 = 0;
  SUM1 = 0;
  
  FOR SELECT RECID, PRODID, UNIT * (CNT - RCNT - UCNT)
  FROM DOC_PROD
  WHERE DOCID = :PDOCID AND CNT > RCNT 
  ORDER BY RECID
  INTO :PRECID, :PRODID, :PCNT
  DO BEGIN
  
    FOR SELECT DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.UNIT, DOC_PROD.CNT - DOC_PROD.RCNT - DOC_PROD.UCNT, DOC_PROD.PRICE, DOC_PROD.NDSPRICE, DOC_PROD.NEWPRICE, PRODUCT.NDS
    FROM DOC_PROD
    INNNER JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID AND DOC.CLIENTID2 = :CLIENTID1 AND DOC.KIND = 1
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    WHERE DOC_PROD.KIND=0 AND DOC_PROD.PRODID = :PRODID
    INTO :INDOCID, :INRECID, :UNIT, :CNT, :INPRICE, :INNDSPRICE, :OUTPRICE, :NDS
    DO IF (PCNT > E AND CNT > E) THEN BEGIN

      IF (CNT * UNIT >= PCNT) THEN BEGIN
        CNT = PCNT / UNIT;
        PCNT = 0;
      END 
      ELSE BEGIN
        PCNT = PCNT - CNT * UNIT;
      END

      IF (NDS IS NULL) THEN NDS = 0;
      IF (BIT_AND(PARAM1, 2) = 2) /*check nds*/
        THEN NDSPRICE = OUTPRICE * (NDS / (100 + NDS));
        ELSE NDSPRICE = 0;
      NEWPRICE = ROUND_CEIL(OUTPRICE * (1 + PRICEPER / 100), PRICERND);

      IF (DOCID IS NULL) THEN DOCID = GEN_ID(GENDOCID, 1);
      RECID = RECID + 10;

      INSERT INTO DOC_PROD (DOCID, CLIENTID2, RECID, KIND, INDOCID, INRECID, PRODID, UNIT, CNT, INPRICE, INNDSPRICE, OUTPRICE, PRICE, NDSPRICE, NEWPRICE, NALOGSUM)
      VALUES (:DOCID, :CLIENTID2, :RECID, 1, :INDOCID, :INRECID, :PRODID, :UNIT, :CNT, :INPRICE, :INNDSPRICE, :OUTPRICE, :OUTPRICE, :NDSPRICE, :NEWPRICE, 0);

      SUM0 = SUM0 + ROUND_CURR(OUTPRICE * CNT * UNIT);
      SUM1 = SUM1 + ROUND_CURR(NDSPRICE * CNT * UNIT);
    END
  END

  IF (DOCID IS NOT NULL) THEN
    INSERT INTO DOC (DOCID, CLIENTID1, CLIENTID2, KIND, SKIND, PARAM1, SUM0, SUM1, SUM2)
    VALUES (:DOCID, :CLIENTID1, :CLIENTID2, 257, 0, BIT_AND(:PARAM1, 2), :SUM0, :SUM1, 0);

END^

SET TERM ;^

COMMIT WORK;
EXECUTE PROCEDURE GET_VERSION(1);
COMMIT WORK;