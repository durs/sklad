SET TERM ---;

ALTER PROCEDURE QUERY_DOC_SUM (
  CLIENTID INTEGER,
  SKIND SMALLINT,
  LAST_DATE DATE,
  MONTH_DATE DATE,
  YEAR_DATE DATE
) RETURNS (
  IN_SUM DOUBLE PRECISION,
  IN_NDS DOUBLE PRECISION,
  OUT_SUM DOUBLE PRECISION,
  OUT_NDS DOUBLE PRECISION,
  NALOG DOUBLE PRECISION
) AS                                               
BEGIN
  SELECT 
  SUM(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.INPRICE), 
  SUM(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.INNDSPRICE), 
  SUM(ROUND_CURR(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.PRICE)), 
  SUM(ROUND_CURR(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.NDSPRICE)), 
  SUM(DOC_PROD.NALOGSUM)
  FROM DOC,DOC_PROD
  WHERE DOC.DOCID=DOC_PROD.DOCID AND DOC.CLIENTID1=:CLIENTID AND DOC.KIND=1
  AND DOC.DATE1=:LAST_DATE
  AND (:SKIND IS NULL OR DOC.SKIND=:SKIND OR (:SKIND=0 AND DOC.SKIND<=0))
  INTO :IN_SUM, :IN_NDS, :OUT_SUM, :OUT_NDS, :NALOG;
  SUSPEND;

  SELECT 
  SUM(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.INPRICE), 
  SUM(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.INNDSPRICE), 
  SUM(ROUND_CURR(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.PRICE)),
  SUM(ROUND_CURR(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.NDSPRICE)),
  SUM(DOC_PROD.NALOGSUM)
  FROM DOC,DOC_PROD
  WHERE DOC.DOCID=DOC_PROD.DOCID AND DOC.CLIENTID1=:CLIENTID AND DOC.KIND=1
  AND DOC.DATE1>=:MONTH_DATE AND DOC.DATE1<=:LAST_DATE
  AND (:SKIND IS NULL OR DOC.SKIND=:SKIND OR (:SKIND=0 AND DOC.SKIND<=0))
  INTO :IN_SUM, :IN_NDS, :OUT_SUM, :OUT_NDS, :NALOG;
  SUSPEND;

  SELECT 
  SUM(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.INPRICE), 
  SUM(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.INNDSPRICE), 
  SUM(ROUND_CURR(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.PRICE)), 
  SUM(ROUND_CURR(DOC_PROD.UNIT*DOC_PROD.CNT*DOC_PROD.NDSPRICE)), 
  SUM(DOC_PROD.NALOGSUM)
  FROM DOC,DOC_PROD
  WHERE DOC.DOCID=DOC_PROD.DOCID AND DOC.CLIENTID1=:CLIENTID AND DOC.KIND=1
  AND DOC.DATE1>=:YEAR_DATE AND DOC.DATE1<=:LAST_DATE
  AND (:SKIND IS NULL OR DOC.SKIND=:SKIND OR (:SKIND=0 AND DOC.SKIND<=0))
  INTO :IN_SUM, :IN_NDS, :OUT_SUM, :OUT_NDS, :NALOG;
  SUSPEND;
END
---

ALTER PROCEDURE QUERY_OSTATOK2 (
  CLIENTID INTEGER,
  FIRSTDOCDATE DATE,
  FIRSTDATE DATE,
  LASTDATE DATE
) RETURNS (
  INDOCID INTEGER,
  INRECID INTEGER,
  PRODID INTEGER,
  INCNT DOUBLE PRECISION,
  OUTCNT DOUBLE PRECISION,
  CNT DOUBLE PRECISION,
  VCNT DOUBLE PRECISION,
  UNIT DOUBLE PRECISION,
  INPRICE DOUBLE PRECISION,
  INNDSPRICE DOUBLE PRECISION,
  OUTPRICE NUMERIC(15, 2),
  OUTSUM NUMERIC(15, 2),
  OUTNDSSUM NUMERIC(15, 2),
  OUTNALOGSUM NUMERIC(15, 2),
  ISOST SMALLINT
) AS                                                                                                                                                                       
  DECLARE VARIABLE E DOUBLE PRECISION;
  DECLARE VARIABLE KIND INTEGER;
  DECLARE VARIABLE RCNT DOUBLE PRECISION;
  DECLARE VARIABLE INNERCNT DOUBLE PRECISION;
  DECLARE VARIABLE PRICE DOUBLE PRECISION;
  DECLARE VARIABLE NDSPRICE DOUBLE PRECISION;
  DECLARE VARIABLE DATE1 DATE;
BEGIN
  E=0.00001;
  SELECT KIND FROM SKLAD WHERE CLIENTID=:CLIENTID INTO :KIND;
  IF (KIND IS NULL) THEN KIND=0;

  FOR SELECT DOC.DATE1, DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.PRODID,
    DOC_PROD.CNT, DOC_PROD.UNIT, 
    DOC_PROD.INPRICE, DOC_PROD.INNDSPRICE, DOC_PROD.PRICE, DOC_PROD.NDSPRICE, DOC_PROD.NEWPRICE
    FROM DOC,DOC_PROD
    WHERE DOC.CLIENTID2=:CLIENTID AND DOC.KIND=1
    AND (:FIRSTDOCDATE IS NULL OR DOC.DATE1>=:FIRSTDOCDATE) AND (:LASTDATE IS NULL OR DOC.DATE1<=:LASTDATE)
    AND DOC_PROD.DOCID=DOC.DOCID
    ORDER BY 1,2,3,4
    INTO :DATE1, :INDOCID, :INRECID, :PRODID, :INCNT, :UNIT, :INPRICE, :INNDSPRICE, :PRICE, :NDSPRICE, :OUTPRICE
  DO IF (INCNT>=0 OR DATE1>=FIRSTDATE) THEN BEGIN
    IF (KIND<>1) THEN BEGIN
      INPRICE=:PRICE;
      INNDSPRICE=:NDSPRICE;
    END
    IF (DATE1<FIRSTDATE) THEN ISOST=1; ELSE ISOST=0;

    /*GET VOZVRAT COUNT*/
    IF (FIRSTDATE IS NOT NULL) THEN 
      SELECT SUM(DOC_PROD.CNT*DOC_PROD.UNIT)
      FROM DOC_PROD
      LEFT JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID
      WHERE DOC_PROD.PDOCID=:INDOCID AND DOC_PROD.PRECID=:INRECID
      AND (DOC.DATE1<:FIRSTDATE) AND DOC.KIND=1
      INTO :VCNT;
    ELSE VCNT=0;
    IF (VCNT IS NULL) THEN VCNT=0; ELSE VCNT=VCNT/UNIT;

    /*GET INNER RELEASE COUNT*/
    /*MUST BE DELETED
    SELECT SUM(DOC_PROD.CNT*DOC_PROD.UNIT)
      FROM DOC_PROD
      LEFT JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID
      WHERE DOC_PROD.INDOCID=:INDOCID AND DOC_PROD.INRECID=:INRECID
      AND DOC.KIND=1 AND DOC.SKIND<=0
      INTO :INNERCNT;
    IF (INNERCNT IS NULL) THEN INNERCNT=0; ELSE INNERCNT=INNERCNT/UNIT;
    */

    /*GET ALL RELEASE COUNT*/
    SELECT SUM(DOC_PROD.CNT*DOC_PROD.UNIT)
      FROM DOC_PROD
      LEFT JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID
      WHERE DOC_PROD.INDOCID=:INDOCID AND DOC_PROD.INRECID=:INRECID
      AND (:LASTDATE IS NULL OR DOC.DATE1<=:LASTDATE) 
      AND DOC.KIND=1 
      INTO :RCNT;
    IF (RCNT IS NULL) THEN RCNT=0; ELSE RCNT=RCNT/UNIT;
    CNT=INCNT-RCNT;

    /*GET RELEASE COUNT*/
    IF ((RCNT<>0) AND (FIRSTDATE IS NOT NULL)) THEN BEGIN
      SELECT SUM(DOC_PROD.CNT*DOC_PROD.UNIT),
        SUM(ROUND_CURR(DOC_PROD.CNT*DOC_PROD.UNIT*DOC_PROD.PRICE)), SUM(ROUND_CURR(DOC_PROD.CNT*DOC_PROD.UNIT*DOC_PROD.NDSPRICE)), SUM(DOC_PROD.NALOGSUM)
        FROM DOC_PROD
        LEFT JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID
        WHERE DOC_PROD.INDOCID=:INDOCID AND DOC_PROD.INRECID=:INRECID
        AND DOC.DATE1>=:FIRSTDATE AND (:LASTDATE IS NULL OR DOC.DATE1<=:LASTDATE) 
        AND DOC.KIND=1 /* AND DOC.SKIND>0 */
        INTO :OUTCNT,:OUTSUM,:OUTNDSSUM,:OUTNALOGSUM;
      IF (OUTCNT IS NULL) THEN OUTCNT=0; ELSE OUTCNT=OUTCNT/UNIT;
      IF (OUTSUM IS NULL) THEN OUTSUM=0;
      IF (OUTNDSSUM IS NULL) THEN OUTNDSSUM=0;
      IF (OUTNALOGSUM IS NULL) THEN OUTNALOGSUM=0;
      INCNT=CNT+OUTCNT;
      IF (CNT+VCNT<-E OR CNT+VCNT>E OR OUTCNT<-E OR OUTCNT>E OR OUTSUM<-E OR OUTSUM>E) THEN SUSPEND;
    END ELSE BEGIN
      OUTCNT=0; OUTSUM=0; OUTNDSSUM=0; OUTNALOGSUM=0;
      IF (CNT+VCNT<-E OR CNT+VCNT>E) THEN SUSPEND;
    END
  END
END
---

ALTER PROCEDURE QUERY_BOOK_OUT (
  CLNTID INTEGER,
  FIRSTDATE DATE,
  LASTDATE DATE
) RETURNS (
  DOCID INTEGER,
  CLIENTID1 INTEGER,
  CLIENTID2 INTEGER,
  KIND INTEGER,
  SKIND INTEGER,
  DOCNO VARCHAR(10),
  DATE1 DATE,
  DATE2 DATE,
  SUM0 DOUBLE PRECISION,
  SUM1 DOUBLE PRECISION,
  SUM2 DOUBLE PRECISION,
  SUM10 DOUBLE PRECISION,
  SUM20 DOUBLE PRECISION,
  NDSSUM10 DOUBLE PRECISION,
  NDSSUM20 DOUBLE PRECISION
) AS                                                                
DECLARE VARIABLE NALOGSUM DOUBLE PRECISION;                                       
BEGIN
  FOR SELECT D.DOCID, D.CLIENTID1, D.CLIENTID2, D.KIND, D.SKIND, D.DOCNO, D.DATE1, D.DATE2,
    D.SUM0, D.SUM1, D.SUM2
    FROM DOC D
    WHERE D.CLIENTID1 = :CLNTID AND D.KIND = 1 /*AND D.SKIND>0*/
    AND D.DATE1 >= :FIRSTDATE AND D.DATE1 <= :LASTDATE
    ORDER BY D.DATE1, D.DOCID
  INTO :DOCID, :CLIENTID1, :CLIENTID2, :KIND, :SKIND, :DOCNO, :DATE1, :DATE2, :SUM0, :SUM1, :SUM2
  DO BEGIN
    SELECT SUM(ROUND_CURR(DOC_PROD.PRICE * DOC_PROD.UNIT * DOC_PROD.CNT)), SUM(ROUND_CURR(DOC_PROD.NDSPRICE * DOC_PROD.UNIT * DOC_PROD.CNT)), SUM(DOC_PROD.NALOGSUM)
    FROM DOC_PROD
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    WHERE DOC_PROD.DOCID = :DOCID AND PRODUCT.NDS = 10
    INTO :SUM10, :NDSSUM10, :NALOGSUM;
    IF (SUM10 IS NULL) THEN SUM10 = 0;
    IF (NDSSUM10 IS NULL) THEN NDSSUM10 = 0;
    IF (NALOGSUM IS NOT NULL) THEN SUM10 = SUM10 - NALOGSUM;
    SUM10 = SUM10 - NDSSUM10;

    SELECT SUM(ROUND_CURR(DOC_PROD.PRICE * DOC_PROD.UNIT * DOC_PROD.CNT)), SUM(ROUND_CURR(DOC_PROD.NDSPRICE * DOC_PROD.UNIT * DOC_PROD.CNT)), SUM(DOC_PROD.NALOGSUM)
    FROM DOC_PROD
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    WHERE DOC_PROD.DOCID = :DOCID AND PRODUCT.NDS = 20
    INTO :SUM20, :NDSSUM20, :NALOGSUM;
    IF (SUM20 IS NULL) THEN SUM20 = 0;
    IF (NDSSUM20 IS NULL) THEN NDSSUM20 = 0;
    IF (NALOGSUM IS NOT NULL) THEN SUM20 = SUM20 - NALOGSUM;
    SUM20 = SUM20 - NDSSUM20;

    SUSPEND;
  END
END
---

ALTER PROCEDURE QUERY_BOOK_IN (
  CLNTID INTEGER,
  FIRSTDATE DATE,
  LASTDATE DATE
) RETURNS (
  DOCID INTEGER,
  CLIENTID1 INTEGER,
  CLIENTID2 INTEGER,
  KIND INTEGER,
  SKIND INTEGER,
  DOCNO VARCHAR(10),
  DATE1 DATE,
  DATE2 DATE,
  SUM0 DOUBLE PRECISION,
  SUM1 DOUBLE PRECISION,
  SUM2 DOUBLE PRECISION,
  SUM10 DOUBLE PRECISION,
  SUM20 DOUBLE PRECISION,
  NDSSUM10 DOUBLE PRECISION,
  NDSSUM20 DOUBLE PRECISION
) AS                                                                     
DECLARE VARIABLE NALOGSUM DOUBLE PRECISION;                                       
BEGIN
  FOR SELECT D.DOCID, D.CLIENTID1, D.CLIENTID2, D.KIND, D.SKIND, D.DOCNO, D.DATE1, D.DATE2,
    D.SUM0, D.SUM1, D.SUM2
    FROM DOC D
    WHERE D.CLIENTID2 = :CLNTID AND D.KIND = 1 /*AND D.SKIND > 0*/
    AND D.DATE2 >= :FIRSTDATE AND D.DATE2 <= :LASTDATE
    ORDER BY D.DATE2, D.DOCID
  INTO :DOCID, :CLIENTID1, :CLIENTID2, :KIND, :SKIND, :DOCNO, :DATE1, :DATE2, :SUM0, :SUM1, :SUM2
  DO BEGIN
    IF (SUM0 IS NULL) THEN SUM0 = 0;
    IF (SUM1 IS NULL) THEN SUM1 = 0;
    IF (SUM2 IS NULL) THEN SUM2 = 0;

    SELECT SUM(ROUND_CURR(DOC_PROD.PRICE * DOC_PROD.UNIT * DOC_PROD.CNT)), SUM(ROUND_CURR(DOC_PROD.NDSPRICE * DOC_PROD.UNIT * DOC_PROD.CNT)), SUM(DOC_PROD.NALOGSUM)
    FROM DOC_PROD
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    WHERE DOC_PROD.DOCID = :DOCID AND PRODUCT.NDS = 10
    INTO :SUM10, :NDSSUM10, :NALOGSUM;
    IF (SUM10 IS NULL) THEN SUM10 = 0;
    IF (NDSSUM10 IS NULL) THEN NDSSUM10 = 0;
    /*IF (NALOGSUM IS NOT NULL) THEN SUM10 = SUM10 - NALOGSUM;*/
    SUM10 = SUM10 - NDSSUM10;

    SELECT SUM(ROUND_CURR(DOC_PROD.PRICE * DOC_PROD.UNIT * DOC_PROD.CNT)), SUM(ROUND_CURR(DOC_PROD.NDSPRICE * DOC_PROD.UNIT * DOC_PROD.CNT)), SUM(DOC_PROD.NALOGSUM)
    FROM DOC_PROD
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    WHERE DOC_PROD.DOCID = :DOCID AND PRODUCT.NDS = 20
    INTO :SUM20, :NDSSUM20, :NALOGSUM;
    IF (SUM20 IS NULL) THEN SUM20 = 0;
    IF (NDSSUM20 IS NULL) THEN NDSSUM20 = 0;
    /*IF (NALOGSUM IS NOT NULL) THEN SUM20 = SUM20 - NALOGSUM;*/
    SUM20 = SUM20 - NDSSUM20;

    SUSPEND;
  END
END
---

ALTER PROCEDURE QUERY_BOOK_INNER (
  CLNTID INTEGER,
  FIRSTDATE DATE,
  LASTDATE DATE
) RETURNS (
  CNT DOUBLE PRECISION,
  INSUM DOUBLE PRECISION,
  INNDSSUM DOUBLE PRECISION,
  INSUM10 DOUBLE PRECISION,
  INSUM20 DOUBLE PRECISION,
  INNDSSUM10 DOUBLE PRECISION,
  INNDSSUM20 DOUBLE PRECISION,
  OUTSUM DOUBLE PRECISION,
  OUTNDSSUM DOUBLE PRECISION,
  OUTNALOGSUM DOUBLE PRECISION,
  OUTSUM10 DOUBLE PRECISION,
  OUTSUM20 DOUBLE PRECISION,
  OUTNDSSUM10 DOUBLE PRECISION,
  OUTNDSSUM20 DOUBLE PRECISION
) AS        
DECLARE VARIABLE NALOGSUM DOUBLE PRECISION;                                       
BEGIN

  SELECT SUM(DOC_PROD.UNIT * DOC_PROD.CNT),
    SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INPRICE), SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INNDSPRICE),
    SUM(ROUND_CURR(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.PRICE)), SUM(ROUND_CURR(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.NDSPRICE)), SUM(DOC_PROD.NALOGSUM)
  FROM DOC
  JOIN DOC_PROD ON DOC_PROD.DOCID = DOC.DOCID
  WHERE DOC.CLIENTID1 = :CLNTID
  AND DOC.DATE2 >= :FIRSTDATE AND DOC.DATE2 <= :LASTDATE
  AND DOC.KIND = 1 AND DOC.SKIND <= 0     
  INTO :CNT, :INSUM, :INNDSSUM, :OUTSUM, :OUTNDSSUM, :OUTNALOGSUM;
  IF (CNT IS NULL) THEN CNT = 0;
  IF (INSUM IS NULL) THEN INSUM = 0;
  IF (INNDSSUM IS NULL) THEN INNDSSUM = 0;
  IF (OUTSUM IS NULL) THEN OUTSUM = 0;
  IF (OUTNDSSUM IS NULL) THEN OUTNDSSUM = 0;
  IF (OUTNALOGSUM IS NULL) THEN OUTNALOGSUM = 0;

  SELECT 
    SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INPRICE), SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INNDSPRICE),
    SUM(ROUND_CURR(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.PRICE)), SUM(ROUND_CURR(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.NDSPRICE)),
    SUM(DOC_PROD.NALOGSUM)
  FROM DOC
  JOIN DOC_PROD ON DOC_PROD.DOCID = DOC.DOCID
  LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
  WHERE DOC.CLIENTID1 = :CLNTID
  AND DOC.DATE2 >= :FIRSTDATE AND DOC.DATE2 <= :LASTDATE
  AND DOC.KIND = 1 AND DOC.SKIND <= 0     
  AND PRODUCT.NDS = 10
  INTO :INSUM10, :INNDSSUM10, :OUTSUM10, :OUTNDSSUM10, :NALOGSUM;
  IF (INSUM10 IS NULL) THEN INSUM10 = 0;
  IF (INNDSSUM10 IS NULL) THEN INNDSSUM10 = 0;
  IF (OUTSUM10 IS NULL) THEN OUTSUM10 = 0;
  IF (OUTNDSSUM10 IS NULL) THEN OUTNDSSUM10 = 0;
  IF (NALOGSUM IS NOT NULL) THEN OUTSUM10 = OUTSUM10 - NALOGSUM;
  INSUM10 = INSUM10-INNDSSUM10;
  OUTSUM10 = OUTSUM10-OUTNDSSUM10;

  SELECT
    SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INPRICE), SUM(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.INNDSPRICE),
    SUM(ROUND_CURR(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.PRICE)), SUM(ROUND_CURR(DOC_PROD.UNIT * DOC_PROD.CNT * DOC_PROD.NDSPRICE)),
    SUM(DOC_PROD.NALOGSUM)
  FROM DOC
  JOIN DOC_PROD ON DOC_PROD.DOCID = DOC.DOCID
  LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
  WHERE DOC.CLIENTID1 = :CLNTID
  AND DOC.DATE2 >= :FIRSTDATE AND DOC.DATE2 <= :LASTDATE
  AND DOC.KIND = 1 AND DOC.SKIND <= 0     
  AND PRODUCT.NDS = 20
  INTO :INSUM20, :INNDSSUM20, :OUTSUM20, :OUTNDSSUM20, :NALOGSUM;
  IF (INSUM20 IS NULL) THEN INSUM20 = 0;
  IF (INNDSSUM20 IS NULL) THEN INNDSSUM20 = 0;
  IF (OUTSUM20 IS NULL) THEN OUTSUM20 = 0;
  IF (OUTNDSSUM20 IS NULL) THEN OUTNDSSUM20 = 0;
  IF (NALOGSUM IS NOT NULL) THEN OUTSUM20 = OUTSUM20 - NALOGSUM;
  INSUM20 = INSUM20 - INNDSSUM20;
  OUTSUM20 = OUTSUM20 - OUTNDSSUM20;

  IF (CNT <> 0) THEN SUSPEND;
END
---

ALTER PROCEDURE EXPORT_PRODUCT (
  CLIENTID1 INTEGER,
  CLIENTID2 INTEGER,
  INDOCID INTEGER,
  INRECID INTEGER,
  CNT DOUBLE PRECISION,
  UNIT DOUBLE PRECISION
) RETURNS (
  DOCID INTEGER,
  RECID INTEGER
) AS                                                                                                                                                                                                                                      
DECLARE VARIABLE PRODID INTEGER;
DECLARE VARIABLE PARAM1 INTEGER;
DECLARE VARIABLE PER DOUBLE PRECISION;
DECLARE VARIABLE PRICEPER DOUBLE PRECISION;
DECLARE VARIABLE PRICERND INTEGER;
DECLARE VARIABLE INUNIT DOUBLE PRECISION;
DECLARE VARIABLE NDS DOUBLE PRECISION;
DECLARE VARIABLE INPRICE DOUBLE PRECISION;
DECLARE VARIABLE INOUTPRICE DOUBLE PRECISION;
DECLARE VARIABLE PRICE DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE DOUBLE PRECISION;
DECLARE VARIABLE INNDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE NDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE SUM0 DOUBLE PRECISION;
DECLARE VARIABLE SUM1 DOUBLE PRECISION;
BEGIN
  FOR SELECT DOCID, PARAM1, PARAM2 FROM DOC 
    WHERE CLIENTID1 = :CLIENTID1 AND CLIENTID2 = :CLIENTID2 AND KIND = 1 AND SKIND = -1
    INTO :DOCID, :PARAM1, :PER
  DO RECID = NULL;

  IF (DOCID IS NULL) THEN BEGIN
    SELECT DOCPARAM1, DOCPARAM2 FROM SKLAD WHERE CLIENTID = :CLIENTID1 INTO :PARAM1, :PER;
    DOCID = GEN_ID(GENDOCID,1);
    INSERT INTO DOC (DOCID, CLIENTID1, CLIENTID2, KIND, SKIND, PARAM1, PARAM2, SUM0, SUM1, SUM2)
    VALUES (:DOCID, :CLIENTID1, :CLIENTID2, 1, -1, :PARAM1, :PER, 0, 0, 0);
  END 
  ELSE BEGIN
    SELECT RECID, UNIT, PRICE, NDSPRICE FROM DOC_PROD 
    WHERE DOCID = :DOCID AND INDOCID = :INDOCID AND INRECID = :INRECID
    INTO :RECID, :INUNIT, :PRICE, :NDSPRICE;
  END

  IF (RECID IS NULL) THEN BEGIN
    IF (PARAM1 IS NULL) THEN PARAM1 = 0;
    IF (PER IS NULL) THEN PER = 0;

    SELECT PRICE_PERCENT, PRICE_ROUND FROM SKLAD WHERE CLIENTID = :CLIENTID2 INTO :PRICEPER, :PRICERND;
    IF (PRICEPER IS NULL) THEN PRICEPER = 0;
    IF (PRICERND IS NULL OR PRICERND = 0) THEN PRICERND = 100;  

    SELECT PRODID, UNIT, PRICE, NEWPRICE, NDSPRICE FROM DOC_PROD
    WHERE DOCID = :INDOCID AND RECID = :INRECID
    INTO :PRODID, :INUNIT, :INPRICE, :INOUTPRICE, :INNDSPRICE;
    IF (PRODID IS NULL) THEN EXCEPTION E_OST_NOTFOUND;

    NDS = 0;
    SELECT NDS FROM PRODUCT WHERE PRODID = :PRODID INTO :NDS;

    SELECT MAX(RECID) + 10 FROM DOC_PROD WHERE DOCID = :DOCID INTO :RECID;
    IF (RECID IS NULL) THEN RECID = 10;

    CNT = CNT * (UNIT / INUNIT);
    IF (BIT_AND(PARAM1, 4) = 4) /*check in price*/
      THEN PRICE = ROUND_CURR(INPRICE * (1 + PER / 100));
      ELSE PRICE = ROUND_CURR(INOUTPRICE * (1 + PER / 100));
    IF (BIT_AND(PARAM1, 2) = 2) /*check nds*/
      THEN NDSPRICE = PRICE * (NDS / (100 + NDS));
      ELSE NDSPRICE = 0;
    NEWPRICE = ROUND_CEIL(PRICE * (1 + PRICEPER / 100), PRICERND);

    INSERT INTO DOC_PROD (DOCID, RECID, INDOCID, INRECID, PRODID, CNT, UNIT, INPRICE, INNDSPRICE, OUTPRICE, PRICE, NDSPRICE, NALOGSUM, NEWPRICE)
    VALUES (:DOCID, :RECID, :INDOCID, :INRECID, :PRODID, :CNT, :INUNIT, :INPRICE, :INNDSPRICE, :INOUTPRICE, :PRICE, :NDSPRICE, 0, :NEWPRICE);
  END 
  ELSE BEGIN
    CNT = CNT * (UNIT / INUNIT);
    UPDATE DOC_PROD SET CNT = CNT + :CNT
    WHERE DOCID = :DOCID AND RECID = :RECID;
  END
  SUM0 = ROUND_CURR(CNT * INUNIT * PRICE);
  SUM1 = ROUND_CURR(CNT * INUNIT * NDSPRICE);
  UPDATE DOC SET SUM0 = SUM0 + :SUM0, SUM1 = SUM1 + :SUM1 WHERE DOCID = :DOCID;
END
---

ALTER PROCEDURE QUERY_DEBIT_CLIENT (
  CLNTID1 INTEGER,
  CLNTID2 INTEGER,
  DAT1 DATE,
  DAT2 DATE
) RETURNS (
  DOCID INTEGER,
  CLIENTID1 INTEGER,
  CLIENTID2 INTEGER,
  KIND INTEGER,
  SKIND INTEGER,
  DOCNO VARCHAR(10),
  DATE1 DATE,
  DEBIT DOUBLE PRECISION,
  CREDIT DOUBLE PRECISION,
  SUM0 DOUBLE PRECISION,
  OST DOUBLE PRECISION
) AS                                      
DECLARE VARIABLE SCHET VARCHAR(10);
DECLARE VARIABLE OPLATA1 INTEGER;
DECLARE VARIABLE OPLATA2 INTEGER;
BEGIN
  IF (DAT1 IS NOT NULL) THEN BEGIN
    SELECT SUM(DOC.SUM0), SUM(DOC.OST)
    FROM DOC
    LEFT JOIN SCHETA ON SCHETA.SCHET = DOC.PARAM6   
    WHERE DOC.CLIENTID1 = :CLNTID1 AND DOC.CLIENTID2 = :CLNTID2
    AND DOC.DATE1 < :DAT1
    AND (DOC.KIND = 1 OR (DOC.KIND = 2 AND (SCHETA.OPLATA1 = 1 OR SCHETA.OPLATA2 = 1)))
    INTO :DEBIT, :OST;
    IF (DEBIT IS NULL) THEN DEBIT = 0;
    IF (OST IS NULL) THEN OST = 0;

    SELECT SUM(DOC.SUM0), SUM(DOC.OST)
    FROM DOC
    LEFT JOIN SCHETA ON SCHETA.SCHET = DOC.PARAM6   
    WHERE DOC.CLIENTID1 = :CLNTID2 AND DOC.CLIENTID2 = :CLNTID1
    AND DOC.DATE1 < :DAT1
    AND (DOC.KIND = 1 OR (DOC.KIND = 2 AND (SCHETA.OPLATA1 = 1 OR SCHETA.OPLATA2 = 1)))
    INTO :CREDIT, :SUM0;
    IF (CREDIT IS NULL) THEN CREDIT = 0;
    IF (SUM0 IS NULL) THEN SUM0 = 0;

    /*
    DEBIT = DEBIT - CREDIT;
    CREDIT = 0;
    IF (DEBIT < 0) THEN BEGIN
        CREDIT = -DEBIT;
        DEBIT = 0;
    END
    */    

    OST = OST - SUM0;
    SUM0 = NULL;
    DATE1 = DAT1 - 1;
    SUSPEND;
  END

  FOR SELECT DOC.DOCID, DOC.CLIENTID1, DOC.CLIENTID2, DOC.KIND, DOC.SKIND, DOC.PARAM6, DOC.DOCNO, DOC.DATE1, DOC.SUM0, DOC.OST
    FROM DOC
    WHERE ((DOC.CLIENTID1 = :CLNTID1 AND DOC.CLIENTID2 = :CLNTID2) OR (DOC.CLIENTID1 = :CLNTID2 AND DOC.CLIENTID2 = :CLNTID1))
    AND (:DAT1 IS NULL OR DOC.DATE1 >= :DAT1) AND DOC.DATE1 <= :DAT2
    AND DOC.KIND IN (1, 2)
    ORDER BY DOC.DATE1, DOC.KIND
    INTO :DOCID, :CLIENTID1, :CLIENTID2, :KIND, :SKIND, :SCHET, :DOCNO, :DATE1, :SUM0, :OST
  DO BEGIN
    DEBIT = SUM0; CREDIT = 0; OPLATA1 = 0; OPLATA2 = 0;
    IF (KIND = 2) THEN SELECT OPLATA1, OPLATA2 FROM SCHETA WHERE SCHET = :SCHET INTO :OPLATA1, :OPLATA2;   

    /*
    IF (CLIENTID1 <> :CLNTID1) THEN DEBIT = -DEBIT;
    IF (DEBIT < 0) THEN BEGIN
        CREDIT = -DEBIT;
        DEBIT = 0;
    END
    */

    IF (CLIENTID1 <> :CLNTID1) THEN BEGIN
        CREDIT = DEBIT;
        DEBIT = 0;
    END

    IF (KIND = 1 OR (KIND = 2 AND (OPLATA1 = 1 OR OPLATA2 = 1))) THEN SUSPEND;
  END
END
---



SET TERM ;
---

COMMIT WORK;
EXECUTE PROCEDURE GET_VERSION(1);