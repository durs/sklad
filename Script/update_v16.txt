SET TERM ^ ;


ALTER TRIGGER DOC_PROD_BEFOREUPDATE
ACTIVE BEFORE UPDATE POSITION 0
AS
DEClARE VARIABLE E DOUBLE PRECISION;  
DECLARE VARIABLE RCNT DOUBLE PRECISION;
DEClARE VARIABLE OST DOUBLE PRECISION;  
DECLARE VARIABLE UCNT DOUBLE PRECISION;
BEGIN
  E = 0.00001;

  IF (NEW.DOCID <> OLD.DOCID OR NEW.RECID <> OLD.RECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.INDOCID <> OLD.INDOCID OR NEW.INRECID <> OLD.INRECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.PDOCID <> OLD.PDOCID OR NEW.PRECID <> OLD.PRECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.CNT IS NULL) THEN NEW.CNT = 0;
  IF (NEW.RCNT IS NULL) THEN NEW.RCNT = 0;
  IF (NEW.UCNT IS NULL) THEN NEW.UCNT = 0;
  /*IF (NEW.CNT < NEW.RCNT + NEW.UCNT OR (NEW.KIND = 1 AND NEW.RCNT + NEW.UCNT > 0)) THEN EXCEPTION E_TEST;*/

  OST = NEW.CNT - NEW.RCNT;
  IF (NEW.KIND = 0 AND OST > -E AND OST < E) THEN BEGIN
    NEW.KIND = NULL;
    NEW.RCNT = NEW.CNT;
    OST = 0;
  END ELSE IF (NEW.KIND IS NULL AND (OST < -E OR OST > E) ) THEN BEGIN
    NEW.KIND = 0;
  END

  IF (NEW.INDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0; UCNT = 0;
    IF (OLD.KIND IS NULL OR OLD.KIND = 0) THEN RCNT = RCNT - OLD.CNT * OLD.UNIT;
    ELSE IF (OLD.KIND = 1) THEN UCNT = UCNT - OLD.CNT * OLD.UNIT;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN RCNT = RCNT + NEW.CNT * NEW.UNIT;
    ELSE IF (NEW.KIND = 1) THEN UCNT = UCNT + NEW.CNT * NEW.UNIT;
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.INDOCID, NEW.INRECID, RCNT, UCNT;
    /*
  END ELSE BEGIN
    IF (NEW.CNT > 0 AND OST < -E) THEN EXCEPTION E_UPDATE;
    IF (NEW.CNT < 0 AND OST > E) THEN EXCEPTION E_UPDATE;
    */
  END

  /*vozvrat*/
  IF (NEW.PDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0; UCNT = 0;
    IF (OLD.KIND IS NULL OR OLD.KIND = 0) THEN RCNT = RCNT + OLD.CNT * OLD.UNIT;
    ELSE IF (OLD.KIND = 1) THEN UCNT = UCNT + OLD.CNT * OLD.UNIT;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN BEGIN
      RCNT = RCNT - NEW.CNT * NEW.UNIT;
      NEW.RCNT = NEW.CNT;
      NEW.KIND = NULL;
    END ELSE IF (NEW.KIND = 1) THEN BEGIN
      UCNT = UCNT - NEW.CNT * NEW.UNIT;
      NEW.UCNT = NEW.CNT;
    END
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.PDOCID, NEW.PRECID, RCNT, UCNT;
  END

  /*update inprice and inndsprice*/
  IF (NEW.PRICE <> OLD.PRICE OR NEW.NDSPRICE <> OLD.NDSPRICE) THEN
    UPDATE DOC_PROD SET INPRICE = NEW.PRICE, INNDSPRICE = NEW.NDSPRICE WHERE INDOCID = NEW.DOCID AND INRECID = NEW.RECID;

  /*update product price*/
  IF (NEW.PRODID IS NOT NULL AND NEW.NEWPRICE IS NOT NULL) THEN
    UPDATE PRODUCT SET PRICE = NEW.NEWPRICE WHERE PRODID = NEW.PRODID;
END
^


ALTER PROCEDURE UPDATE_OSTATOK (
    INDOCID INTEGER,
    INRECID INTEGER,
    RCNT DOUBLE PRECISION,
    UCNT DOUBLE PRECISION)
AS
DECLARE VARIABLE E DOUBLE PRECISION;
DECLARE VARIABLE PRODID INTEGER;
DECLARE VARIABLE KIND INTEGER;
DECLARE VARIABLE CNT DOUBLE PRECISION;
DECLARE VARIABLE OST_CNT DOUBLE PRECISION;
DECLARE VARIABLE OST_RCNT DOUBLE PRECISION;
DECLARE VARIABLE OST_UCNT DOUBLE PRECISION;
DECLARE VARIABLE OST_UNIT DOUBLE PRECISION;
BEGIN
  E=0.00001;

  SELECT PRODID,KIND,CNT,RCNT,UCNT,UNIT
  FROM DOC_PROD
  WHERE DOCID=:INDOCID AND RECID=:INRECID
  INTO :PRODID,:KIND,:OST_CNT,:OST_RCNT,:OST_UCNT,:OST_UNIT;

  IF (PRODID IS NULL) THEN EXCEPTION E_REC_NOTFOUND;
  RCNT=RCNT/OST_UNIT;
  UCNT=UCNT/OST_UNIT;
    
  IF (/*OST_CNT>0 AND */(KIND IS NULL OR KIND=0)) THEN BEGIN
      OST_RCNT=OST_RCNT+RCNT;
      OST_UCNT=OST_UCNT+UCNT; /*IF (OST_UCNT<0) THEN OST_UCNT=0;*/
      CNT=OST_CNT-OST_RCNT-OST_UCNT;
      IF (CNT<-E) THEN EXCEPTION E_OST_TOOSMALL;
      IF (CNT>OST_CNT+E) THEN EXCEPTION E_OST_TOOBIG;
      UPDATE DOC_PROD SET RCNT=:OST_RCNT,UCNT=:OST_UCNT WHERE DOCID=:INDOCID AND RECID=:INRECID;
  END ELSE EXCEPTION E_OST_NOTFOUND;
END
^


SET TERM ;^

COMMIT WORK;
EXECUTE PROCEDURE GET_VERSION(1);
COMMIT WORK;