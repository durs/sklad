ALTER TABLE DOC_PROD 
ADD CLIENTID2 TYPE_LONG,
ADD DATE1 TYPE_DATE;

SET TERM ---;

CREATE PROCEDURE CORRECT_DOC_PROD   AS       
DECLARE VARIABLE DOCID INTEGER;
DECLARE VARIABLE CLIENTID2 INTEGER;
DECLARE VARIABLE DATE1 DATE;
BEGIN
  FOR SELECT DOCID, CLIENTID2, DATE1 FROM DOC 
  INTO :DOCID, :CLIENTID2, :DATE1
  DO BEGIN
    UPDATE DOC_PROD SET CLIENTID2 = :CLIENTID2, DATE1 = :DATE1 WHERE DOCID = :DOCID;
  END
END
---

ALTER TRIGGER DOC_PROD_BEFOREINSERT AS
DECLARE VARIABLE RCNT DOUBLE PRECISION;
DECLARE VARIABLE UCNT DOUBLE PRECISION;
BEGIN
  /*IF (NEW.CNT<0) THEN EXCEPTION E_UPDATE;*/
  IF (NEW.CNT IS NULL) THEN NEW.CNT=0;
  IF (NEW.RCNT IS NULL) THEN NEW.RCNT=0;
  IF (NEW.UCNT IS NULL) THEN NEW.UCNT=0;
  IF (NEW.KIND=0 AND NEW.CNT=NEW.RCNT) THEN NEW.KIND=NULL; 
  ELSE IF (NEW.KIND IS NULL AND NEW.CNT>NEW.RCNT) THEN NEW.KIND=0;  

  SELECT CLIENTID2, DATE1 FROM DOC WHERE DOCID = NEW.DOCID INTO NEW.CLIENTID2, NEW.DATE1;

  IF (NEW.INDOCID IS NOT NULL) THEN BEGIN
    RCNT=0;
    UCNT=0;
    IF (NEW.KIND IS NULL OR NEW.KIND=0) THEN RCNT=NEW.CNT*NEW.UNIT;
    ELSE IF (NEW.KIND=1) THEN UCNT=NEW.CNT*NEW.UNIT;
    IF (RCNT<>0 OR UCNT<>0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.INDOCID,NEW.INRECID,RCNT,UCNT;
  END

  /*vozvrat*/ 
  IF (NEW.PDOCID IS NOT NULL) THEN BEGIN
    RCNT=0;
    UCNT=0;
    IF (NEW.KIND IS NULL OR NEW.KIND=0) THEN BEGIN
      RCNT=-NEW.CNT*NEW.UNIT;
      NEW.RCNT=NEW.CNT;
      NEW.KIND=NULL;
    END ELSE IF (NEW.KIND=1) THEN BEGIN
      UCNT=-NEW.CNT*NEW.UNIT;
      NEW.UCNT=NEW.CNT;
    END
    IF (RCNT<>0 OR UCNT<>0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.PDOCID,NEW.PRECID,RCNT,UCNT;
  END
END
---

ALTER TRIGGER DOC_BEFOREUPDATE AS
DECLARE VARIABLE DIFF DOUBLE PRECISION;
BEGIN
  /*IF (OLD.KIND>512) THEN EXCEPTION E_ARCHIV;*/
  IF (OLD.DOCID<>NEW.DOCID) THEN EXCEPTION E_FIELD_UPDATE;
  IF (NEW.CLIENTID1=NEW.CLIENTID2) THEN NEW.CLIENTID2=0;/*EXCEPTION E_UPDATE;*/
  IF (OLD.CLIENTID1<>NEW.CLIENTID1) THEN BEGIN
    IF (EXISTS(SELECT * FROM DOC_PROD WHERE DOCID=OLD.DOCID AND INDOCID IS NOT NULL)) THEN EXCEPTION E_FIELD_UPDATE;
  END
  /*update doc no*/
  EXECUTE PROCEDURE UPDATE_DOCNO OLD.CLIENTID1,OLD.KIND,OLD.SKIND,OLD.DOCNO,OLD.SUM0,1 RETURNING_VALUES OLD.DOCNO;
  EXECUTE PROCEDURE UPDATE_DOCNO NEW.CLIENTID1,NEW.KIND,NEW.SKIND,NEW.DOCNO,NEW.SUM0,0 RETURNING_VALUES NEW.DOCNO;
  IF (NEW.SUM0 IS NULL) THEN NEW.SUM0=0;
  IF (NEW.OST IS NULL) THEN NEW.OST=0;
  IF ((OLD.KIND<256 AND NEW.KIND>256) OR (OLD.CLIENTID1<>NEW.CLIENTID1) OR (OLD.CLIENTID2<>NEW.CLIENTID2)) THEN BEGIN
    /*delete debit*/
    DIFF=OLD.OST-OLD.SUM0;
    EXECUTE PROCEDURE UPDATE_DEBIT_UNDO OLD.DOCID,OLD.PDOCID,OLD.CLIENTID1,OLD.CLIENTID2,:DIFF;
    NEW.OST=NEW.SUM0;
  END 
  IF ((OLD.KIND>256 AND NEW.KIND<256) OR (OLD.CLIENTID1<>NEW.CLIENTID1) OR (OLD.CLIENTID2<>NEW.CLIENTID2)) THEN BEGIN
    /*insert debit*/
    EXECUTE PROCEDURE UPDATE_DEBIT NEW.DOCID,NEW.PDOCID,NEW.CLIENTID1,NEW.CLIENTID2,NEW.SUM0
    RETURNING_VALUES NEW.OST;    
  END ELSE IF (NEW.KIND<256) THEN BEGIN
    /*update debit*/
    IF (OLD.SUM0 IS NULL) THEN DIFF=NEW.SUM0; ELSE DIFF=NEW.SUM0-OLD.SUM0;
    IF (DIFF<>0) THEN BEGIN
      IF (OLD.OST IS NULL) THEN NEW.OST=DIFF; ELSE NEW.OST=OLD.OST+DIFF;
      EXECUTE PROCEDURE UPDATE_DEBIT NEW.DOCID,NEW.PDOCID,NEW.CLIENTID1,NEW.CLIENTID2,NEW.OST
      RETURNING_VALUES NEW.OST;
      DIFF=0;
      IF (NEW.SUM0>0) THEN BEGIN
        IF (NEW.OST<0) THEN BEGIN
          DIFF=NEW.OST;
          NEW.OST=0;
        END ELSE IF (NEW.OST>NEW.SUM0) THEN BEGIN
          DIFF=NEW.OST-NEW.SUM0;
          NEW.OST=NEW.SUM0;
        END
      END ELSE BEGIN
        IF (NEW.OST>0) THEN BEGIN
          DIFF=NEW.OST;
          NEW.OST=0;          
        END ELSE IF (NEW.OST<NEW.SUM0) THEN BEGIN
          DIFF=NEW.OST-NEW.SUM0;
          NEW.OST=NEW.SUM0;
        END
      END
      IF (DIFF<>0) THEN EXECUTE PROCEDURE UPDATE_DEBIT_UNDO NEW.DOCID,NEW.PDOCID,NEW.CLIENTID1,NEW.CLIENTID2,:DIFF;
    END
  END
  /*update doc_prod*/
  IF (NEW.CLIENTID2<>OLD.CLIENTID2 OR NEW.DATE1<>OLD.DATE1) THEN
    UPDATE DOC_PROD SET CLIENTID2 = NEW.CLIENTID2, DATE1 = NEW.DATE1 WHERE DOCID = NEW.DOCID;
END
---

ALTER PROCEDURE QUERY_OSTATOK (
  ID INTEGER,
  ID2 INTEGER
) RETURNS (
  INDOCID INTEGER,
  INRECID INTEGER,
  PDOCID INTEGER,
  PRECID INTEGER,
  PRODID INTEGER,
  DATE1 DATE,
  CNT DOUBLE PRECISION,
  UNIT DOUBLE PRECISION,
  INPRICE NUMERIC(15, 2),
  INNDSPRICE DOUBLE PRECISION,
  OUTPRICE NUMERIC(15, 2),
  PRODUCTNAME VARCHAR(50),
  CLASSNAME VARCHAR(10),
  PRODUSERNAME VARCHAR(10),
  PRODUCT VARCHAR(100),
  DIM VARCHAR(10),
  LEN VARCHAR(10),
  NDS FLOAT,
  COUNTRY VARCHAR(50),
  NTD BLOB SUB_TYPE 0 SEGMENT SIZE 80,
  SERTIFICAT BLOB SUB_TYPE 0 SEGMENT SIZE 80,
  COMMENT BLOB SUB_TYPE 0 SEGMENT SIZE 80
) AS                                                                          
BEGIN
  IF (ID IS NULL) THEN 
    FOR SELECT 
      PRODUCT.PRODID,PRODUCT.UNIT,PRODUCT.NDS,PRODUCT.NAME,PRODUCT.DIM,PRODUCT.LEN,PRODUCT.COMMENT,PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME,PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME,CLASS.SMALLNAME,PRODUSER.SMALLNAME,PRODUCT.LEN)
    FROM PRODUCT
    LEFT JOIN CLASS ON CLASS.CLASSID=PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID=PRODUCT.PRODUSERID
    ORDER BY PRODUCT.NAME,PRODUCT.CLASSID,PRODUCT.PRODUSERID,PRODUCT.LEN
    INTO :PRODID,:UNIT,:NDS,:PRODUCTNAME,:DIM,:LEN,:COMMENT,:SERTIFICAT,:CLASSNAME,:PRODUSERNAME,:COUNTRY,:PRODUCT
    DO SUSPEND;
  ELSE IF (ID2 IS NULL) THEN
    FOR SELECT 
      DOC_PROD.DOCID,DOC_PROD.RECID,DOC_PROD.PRODID,DOC_PROD.CNT-DOC_PROD.RCNT-DOC_PROD.UCNT,DOC_PROD.UNIT,DOC_PROD.PRICE,DOC_PROD.NDSPRICE,DOC_PROD.NEWPRICE,DOC_PROD.NTD,DOC_PROD.COMMENT,
      DOC_PROD.DATE1,
      PRODUCT.NDS,PRODUCT.NAME,PRODUCT.DIM,PRODUCT.LEN,PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME,PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME,CLASS.SMALLNAME,PRODUSER.SMALLNAME,PRODUCT.LEN)
    FROM DOC_PROD
    /*INNER JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID AND DOC.CLIENTID2=:ID AND DOC.KIND=1*/
    LEFT JOIN PRODUCT ON PRODUCT.PRODID=DOC_PROD.PRODID
    LEFT JOIN CLASS ON CLASS.CLASSID=PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID=PRODUCT.PRODUSERID
    WHERE DOC_PROD.KIND=0 AND DOC_PROD.CLIENTID2=:ID
    ORDER BY PRODUCT.NAME,PRODUCT.CLASSID,PRODUCT.PRODUSERID,PRODUCT.LEN,DOC_PROD.DATE1
    INTO :INDOCID,:INRECID,:PRODID,:CNT,:UNIT,:INPRICE,:INNDSPRICE,:OUTPRICE,:NTD,:COMMENT,:DATE1,:NDS,:PRODUCTNAME,:DIM,:LEN,:SERTIFICAT,:CLASSNAME,:PRODUSERNAME,:COUNTRY,:PRODUCT
    DO SUSPEND;
  ELSE
    FOR SELECT 
      DOC_PROD.DOCID,DOC_PROD.RECID,DOC_PROD.INDOCID,DOC_PROD.INRECID,
      DOC_PROD.PRODID,DOC_PROD.CNT-DOC_PROD.RCNT-DOC_PROD.UCNT,DOC_PROD.UNIT,DOC_PROD.INPRICE,DOC_PROD.INNDSPRICE,DOC_PROD.PRICE,DOC_PROD.NTD,DOC_PROD.COMMENT,
      DOC.DATE1,
      PRODUCT.NDS,PRODUCT.NAME,PRODUCT.DIM,PRODUCT.LEN,PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME,PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME,CLASS.SMALLNAME,PRODUSER.SMALLNAME,PRODUCT.LEN)
    FROM DOC_PROD
    INNER JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID AND DOC.CLIENTID1=:ID AND DOC.CLIENTID2=:ID2 AND DOC.KIND=1
    LEFT JOIN PRODUCT ON PRODUCT.PRODID=DOC_PROD.PRODID
    LEFT JOIN CLASS ON CLASS.CLASSID=PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID=PRODUCT.PRODUSERID
    WHERE DOC_PROD.KIND=0
    ORDER BY PRODUCT.NAME,PRODUCT.CLASSID,PRODUCT.PRODUSERID,PRODUCT.LEN,DOC.DATE1 DESC
    INTO :PDOCID,:PRECID,:INDOCID,:INRECID,:PRODID,:CNT,:UNIT,:INPRICE,:INNDSPRICE,:OUTPRICE,:NTD,:COMMENT,:DATE1,:NDS,:PRODUCTNAME,:DIM,:LEN,:SERTIFICAT,:CLASSNAME,:PRODUSERNAME,:COUNTRY,:PRODUCT
    DO SUSPEND;
END
---

ALTER PROCEDURE EXPORT_PRODUCT (
  CLIENTID1 INTEGER,
  CLIENTID2 INTEGER,
  INDOCID INTEGER,
  INRECID INTEGER,
  CNT DOUBLE PRECISION,
  UNIT DOUBLE PRECISION
) RETURNS (
  DOCID INTEGER,
  RECID INTEGER
) AS                                                                                                                                                                                                                                    
DECLARE VARIABLE PRODID INTEGER;
DECLARE VARIABLE PARAM1 INTEGER;
DECLARE VARIABLE PER DOUBLE PRECISION;
DECLARE VARIABLE PRICEPER DOUBLE PRECISION;
DECLARE VARIABLE PRICERND INTEGER;
DECLARE VARIABLE INUNIT DOUBLE PRECISION;
DECLARE VARIABLE NDS DOUBLE PRECISION;
DECLARE VARIABLE INPRICE DOUBLE PRECISION;
DECLARE VARIABLE INOUTPRICE DOUBLE PRECISION;
DECLARE VARIABLE PRICE DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE DOUBLE PRECISION;
DECLARE VARIABLE INNDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE NDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE SUM0 DOUBLE PRECISION;
DECLARE VARIABLE SUM1 DOUBLE PRECISION;
BEGIN
  FOR SELECT DOCID,PARAM1,PARAM2 FROM DOC 
    WHERE CLIENTID1=:CLIENTID1 AND CLIENTID2=:CLIENTID2 AND KIND=1 AND SKIND=-1
    INTO :DOCID,:PARAM1,:PER
  DO RECID=NULL;
  IF (DOCID IS NULL) THEN BEGIN
    SELECT DOCPARAM1,DOCPARAM2 FROM SKLAD WHERE CLIENTID=:CLIENTID1 INTO :PARAM1,:PER;
    DOCID=GEN_ID(GENDOCID,1);
    INSERT INTO DOC (DOCID,CLIENTID1,CLIENTID2,KIND,SKIND,PARAM1,PARAM2,SUM0,SUM1,SUM2)
    VALUES (:DOCID,:CLIENTID1,:CLIENTID2,1,-1,:PARAM1,:PER,0,0,0);
  END ELSE BEGIN
    SELECT RECID,UNIT,PRICE,NDSPRICE FROM DOC_PROD 
    WHERE DOCID=:DOCID AND INDOCID=:INDOCID AND INRECID=:INRECID
    INTO :RECID,:INUNIT,:PRICE,:NDSPRICE;
  END
  IF (RECID IS NULL) THEN BEGIN
    IF (PARAM1 IS NULL) THEN PARAM1=0;
    IF (PER IS NULL) THEN PER=0;

    SELECT PRICE_PERCENT,PRICE_ROUND FROM SKLAD WHERE CLIENTID=:CLIENTID2 INTO :PRICEPER,:PRICERND;
    IF (PRICEPER IS NULL) THEN PRICEPER=0;
    IF (PRICERND IS NULL OR PRICERND=0) THEN PRICERND=100;  

    SELECT PRODID,UNIT,PRICE,NEWPRICE,NDSPRICE FROM DOC_PROD
    WHERE DOCID=:INDOCID AND RECID=:INRECID
    INTO :PRODID,:INUNIT,:INPRICE,:INOUTPRICE,:INNDSPRICE;
    IF (PRODID IS NULL) THEN EXCEPTION E_OST_NOTFOUND;

    NDS=0;
    SELECT NDS FROM PRODUCT WHERE PRODID=:PRODID INTO :NDS;

    SELECT MAX(RECID)+10 FROM DOC_PROD WHERE DOCID=:DOCID INTO :RECID;
    IF (RECID IS NULL) THEN RECID=10;

    CNT=CNT*(UNIT/INUNIT);
    IF (BIT_AND(PARAM1,4)=4) /*check in price*/
      THEN PRICE=ROUND_CURR(INPRICE*(1+PER/100));
      ELSE PRICE=ROUND_CURR(INOUTPRICE*(1+PER/100));
    IF (BIT_AND(PARAM1,2)=2) /*check nds*/
      THEN NDSPRICE=PRICE*(NDS/(100+NDS));
      ELSE NDSPRICE=0;
    NEWPRICE=ROUND_CEIL(PRICE*(1+PRICEPER/100),PRICERND);

    INSERT INTO DOC_PROD (DOCID,RECID,INDOCID,INRECID,PRODID,CNT,UNIT,INPRICE,INNDSPRICE,OUTPRICE,PRICE,NDSPRICE,NALOGSUM,NEWPRICE)
    VALUES (:DOCID,:RECID,:INDOCID,:INRECID,:PRODID,:CNT,:INUNIT,:INPRICE,:INNDSPRICE,:INOUTPRICE,:PRICE,:NDSPRICE,0,:NEWPRICE);
  END ELSE BEGIN
    CNT=CNT*(UNIT/INUNIT);
    UPDATE DOC_PROD SET CNT=CNT+:CNT
    WHERE DOCID=:DOCID AND RECID=:RECID;
  END
  SUM0=CNT*INUNIT*PRICE;
  SUM1=CNT*INUNIT*NDSPRICE;
  UPDATE DOC SET SUM0=SUM0+:SUM0, SUM1=SUM1+:SUM1 WHERE DOCID=:DOCID;
END
---

SET TERM ;
---

EXECUTE PROCEDURE GET_VERSION(1);
COMMIT WORK;

EXECUTE PROCEDURE CORRECT_DOC_PROD;
COMMIT WORK;

