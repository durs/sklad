ALTER TABLE CLIENT 
DROP DIRECTOR,
DROP BUGALTER,
DROP KASSIR,
ADD ADDRESS2 TYPE_STR100;



ALTER TABLE PRODUCT
ADD KIND TYPE_SHORT,
ADD PRICE TYPE_CURR;



SET TERM ^;



ALTER TRIGGER DOC_PROD_BEFOREINSERT
AS
DECLARE VARIABLE RCNT DOUBLE PRECISION;
DECLARE VARIABLE UCNT DOUBLE PRECISION;
BEGIN
  /*IF (NEW.CNT < 0) THEN EXCEPTION E_UPDATE;*/
  IF (NEW.CNT IS NULL) THEN NEW.CNT = 0;
  IF (NEW.RCNT IS NULL) THEN NEW.RCNT = 0;
  IF (NEW.UCNT IS NULL) THEN NEW.UCNT = 0;
  IF (NEW.KIND = 0 AND NEW.CNT = NEW.RCNT) THEN NEW.KIND = NULL;
  ELSE IF (NEW.KIND IS NULL AND NEW.CNT > NEW.RCNT) THEN NEW.KIND = 0;

  SELECT CLIENTID2, DATE1 FROM DOC WHERE DOCID = NEW.DOCID INTO NEW.CLIENTID2, NEW.DATE1;

  IF (NEW.INDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0;
    UCNT = 0;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN RCNT = NEW.CNT * NEW.UNIT;
    ELSE IF (NEW.KIND = 1) THEN UCNT = NEW.CNT * NEW.UNIT;
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.INDOCID, NEW.INRECID, RCNT, UCNT;
  END ELSE BEGIN
    IF (NEW.CNT < NEW.RCNT) THEN EXCEPTION E_UPDATE;
  END

  /*vozvrat*/
  IF (NEW.PDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0;
    UCNT = 0;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN BEGIN
      RCNT = -NEW.CNT * NEW.UNIT;
      NEW.RCNT = NEW.CNT;
      NEW.KIND = NULL;
    END ELSE IF (NEW.KIND = 1) THEN BEGIN
      UCNT = -NEW.CNT * NEW.UNIT;
      NEW.UCNT = NEW.CNT;
    END
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.PDOCID, NEW.PRECID, RCNT, UCNT;
  END

  /*update product price*/
  IF (NEW.PRODID IS NOT NULL AND NEW.NEWPRICE IS NOT NULL) THEN
    UPDATE PRODUCT SET PRICE = NEW.NEWPRICE WHERE PRODID = NEW.PRODID;
END^



ALTER TRIGGER DOC_PROD_BEFOREUPDATE
AS
DEClARE VARIABLE E DOUBLE PRECISION;  DECLARE VARIABLE RCNT DOUBLE PRECISION;
DEClARE VARIABLE OST DOUBLE PRECISION;  DECLARE VARIABLE UCNT DOUBLE PRECISION;
BEGIN
  E = 0.00001;

  IF (NEW.DOCID <> OLD.DOCID OR NEW.RECID <> OLD.RECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.INDOCID <> OLD.INDOCID OR NEW.INRECID <> OLD.INRECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.PDOCID <> OLD.PDOCID OR NEW.PRECID <> OLD.PRECID) THEN EXCEPTION E_UPDATE;
  /*IF (NEW.CNT < 0 OR NEW.RCNT < 0 OR NEW.UCNT < 0) THEN EXCEPTION E_UPDATE;*/
  IF (NEW.CNT IS NULL) THEN NEW.CNT = 0;
  IF (NEW.RCNT IS NULL) THEN NEW.RCNT = 0;
  IF (NEW.UCNT IS NULL) THEN NEW.UCNT = 0;
  /*IF (NEW.CNT < NEW.RCNT + NEW.UCNT OR (NEW.KIND = 1 AND NEW.RCNT + NEW.UCNT > 0)) THEN EXCEPTION E_TEST;*/

  OST = NEW.CNT - NEW.RCNT;
  IF (NEW.KIND = 0 AND OST > -E AND OST < E) THEN NEW.KIND = NULL;
  ELSE IF (NEW.KIND IS NULL AND (OST < -E OR OST > E) ) THEN NEW.KIND = 0;

  IF (NEW.INDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0; UCNT = 0;
    IF (OLD.KIND IS NULL OR OLD.KIND = 0) THEN RCNT = RCNT - OLD.CNT * OLD.UNIT;
    ELSE IF (OLD.KIND = 1) THEN UCNT = UCNT - OLD.CNT * OLD.UNIT;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN RCNT = RCNT + NEW.CNT * NEW.UNIT;
    ELSE IF (NEW.KIND = 1) THEN UCNT = UCNT + NEW.CNT * NEW.UNIT;
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.INDOCID, NEW.INRECID, RCNT, UCNT;
  END ELSE BEGIN
    IF (OST < 0) THEN EXCEPTION E_UPDATE;
  END

  /*vozvrat*/
  IF (NEW.PDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0; UCNT = 0;
    IF (OLD.KIND IS NULL OR OLD.KIND = 0) THEN RCNT = RCNT + OLD.CNT * OLD.UNIT;
    ELSE IF (OLD.KIND = 1) THEN UCNT = UCNT + OLD.CNT * OLD.UNIT;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN BEGIN
      RCNT = RCNT - NEW.CNT * NEW.UNIT;
      NEW.RCNT = NEW.CNT;
      NEW.KIND = NULL;
    END ELSE IF (NEW.KIND = 1) THEN BEGIN
      UCNT = UCNT - NEW.CNT * NEW.UNIT;
      NEW.UCNT = NEW.CNT;
    END
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.PDOCID, NEW.PRECID, RCNT, UCNT;
  END

  /*update inprice and inndsprice*/
  IF (NEW.PRICE <> OLD.PRICE OR NEW.NDSPRICE <> OLD.NDSPRICE) THEN
    UPDATE DOC_PROD SET INPRICE = NEW.PRICE, INNDSPRICE = NEW.NDSPRICE WHERE INDOCID = NEW.DOCID AND INRECID = NEW.RECID;

  /*update product price*/
  IF (NEW.PRODID IS NOT NULL AND NEW.NEWPRICE IS NOT NULL) THEN
    UPDATE PRODUCT SET PRICE = NEW.NEWPRICE WHERE PRODID = NEW.PRODID;
END^



alter procedure QUERY_OSTATOK (
    ID integer,
    ID2 integer)
returns (
    INDOCID integer,
    INRECID integer,
    PDOCID integer,
    PRECID integer,
    PRODID integer,
    DATE1 timestamp,
    CNT double precision,
    UNIT double precision,
    INPRICE double precision,
    INNDSPRICE double precision,
    OUTPRICE numeric(15, 2),
    PRODUCTNAME varchar(50) character set WIN1251,
    CLASSNAME varchar(10) character set WIN1251,
    PRODUSERNAME varchar(10) character set WIN1251,
    PRODUCT varchar(100) character set WIN1251,
    DIM varchar(10) character set WIN1251,
    LEN varchar(10) character set WIN1251,
    WEIGHT float,
    NDS float,
    COUNTRY varchar(50) character set WIN1251,
    NTD blob,
    SERTIFICAT blob,
    COMMENT blob)
as
BEGIN
  IF (ID IS NULL) THEN
    FOR SELECT
      PRODUCT.PRODID, PRODUCT.UNIT, PRODUCT.NDS, PRODUCT.NAME, PRODUCT.DIM, PRODUCT.LEN, PRODUCT.WEIGHT, PRODUCT.PRICE, PRODUCT.COMMENT, PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME, PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME, CLASS.SMALLNAME, PRODUSER.SMALLNAME, PRODUCT.LEN)
    FROM PRODUCT
    LEFT JOIN CLASS ON CLASS.CLASSID = PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID = PRODUCT.PRODUSERID
    ORDER BY PRODUCT.NAME, PRODUCT.CLASSID, PRODUCT.PRODUSERID, PRODUCT.LEN
    INTO :PRODID, :UNIT, :NDS, :PRODUCTNAME, :DIM, :LEN, :WEIGHT, :outprice, :COMMENT, :SERTIFICAT, :CLASSNAME, :PRODUSERNAME, :COUNTRY, :PRODUCT
    DO SUSPEND;
  ELSE IF (ID2 IS NULL) THEN
    FOR SELECT
      DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.PRODID, DOC_PROD.CNT - DOC_PROD.RCNT - DOC_PROD.UCNT, DOC_PROD.UNIT, DOC_PROD.PRICE, DOC_PROD.NDSPRICE, DOC_PROD.NEWPRICE, DOC_PROD.NTD, DOC_PROD.COMMENT,
      DOC_PROD.DATE1,
      PRODUCT.NDS, PRODUCT.NAME, PRODUCT.DIM, PRODUCT.LEN, PRODUCT.WEIGHT, PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME, PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME, CLASS.SMALLNAME, PRODUSER.SMALLNAME, PRODUCT.LEN)
    FROM DOC_PROD
    /*INNER JOIN DOC ON DOC.DOCID=DOC_PROD.DOCID AND DOC.CLIENTID2=:ID AND DOC.KIND=1*/
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    LEFT JOIN CLASS ON CLASS.CLASSID = PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID = PRODUCT.PRODUSERID
    WHERE DOC_PROD.KIND = 0 AND DOC_PROD.CLIENTID2 = :ID
    ORDER BY PRODUCT.NAME, PRODUCT.CLASSID, PRODUCT.PRODUSERID, PRODUCT.LEN, DOC_PROD.DATE1
    INTO :INDOCID, :INRECID, :PRODID, :CNT, :UNIT, :INPRICE, :INNDSPRICE, :OUTPRICE, :NTD, :COMMENT, :DATE1, :NDS, :PRODUCTNAME, :DIM, :LEN, :WEIGHT, :SERTIFICAT, :CLASSNAME, :PRODUSERNAME, :COUNTRY, :PRODUCT
    DO SUSPEND;
  ELSE
    FOR SELECT
      DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.INDOCID, DOC_PROD.INRECID,
      DOC_PROD.PRODID, DOC_PROD.CNT - DOC_PROD.RCNT - DOC_PROD.UCNT, DOC_PROD.UNIT, DOC_PROD.INPRICE, DOC_PROD.INNDSPRICE, DOC_PROD.PRICE, DOC_PROD.NTD, DOC_PROD.COMMENT,
      DOC.DATE1,
      PRODUCT.NDS, PRODUCT.NAME, PRODUCT.DIM, PRODUCT.LEN, PRODUCT.WEIGHT, PRODUCT.SERTIFICAT,
      CLASS.SMALLNAME,
      PRODUSER.SMALLNAME, PRODUSER.COUNTRY,
      GET_PRODUCT_NAME(PRODUCT.NAME, CLASS.SMALLNAME, PRODUSER.SMALLNAME, PRODUCT.LEN)
    FROM DOC_PROD
    INNER JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID AND DOC.CLIENTID1 = :ID AND DOC.CLIENTID2 = :ID2 AND DOC.KIND = 1
    LEFT JOIN PRODUCT ON PRODUCT.PRODID = DOC_PROD.PRODID
    LEFT JOIN CLASS ON CLASS.CLASSID = PRODUCT.CLASSID
    LEFT JOIN PRODUSER ON PRODUSER.PRODUSERID = PRODUCT.PRODUSERID
    WHERE DOC_PROD.KIND = 0
    ORDER BY PRODUCT.NAME, PRODUCT.CLASSID, PRODUCT.PRODUSERID, PRODUCT.LEN, DOC.DATE1 DESC
    INTO :PDOCID, :PRECID, :INDOCID, :INRECID, :PRODID, :CNT, :UNIT, :INPRICE, :INNDSPRICE, :OUTPRICE, :NTD, :COMMENT, :DATE1, :NDS, :PRODUCTNAME, :DIM, :LEN, :WEIGHT, :SERTIFICAT, :CLASSNAME, :PRODUSERNAME, :COUNTRY, :PRODUCT
    DO SUSPEND;
END^


SET TERM ;^


COMMIT WORK;
EXECUTE PROCEDURE GET_VERSION(1);
COMMIT WORK;