SET TERM ^;


alter trigger DOC_PROD_BEFOREUPDATE
AS
DEClARE VARIABLE E DOUBLE PRECISION;  DECLARE VARIABLE RCNT DOUBLE PRECISION;
DEClARE VARIABLE OST DOUBLE PRECISION;  DECLARE VARIABLE UCNT DOUBLE PRECISION;
BEGIN
  E = 0.00001;

  IF (NEW.DOCID <> OLD.DOCID OR NEW.RECID <> OLD.RECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.INDOCID <> OLD.INDOCID OR NEW.INRECID <> OLD.INRECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.PDOCID <> OLD.PDOCID OR NEW.PRECID <> OLD.PRECID) THEN EXCEPTION E_UPDATE;
  IF (NEW.CNT IS NULL) THEN NEW.CNT = 0;
  IF (NEW.RCNT IS NULL) THEN NEW.RCNT = 0;
  IF (NEW.UCNT IS NULL) THEN NEW.UCNT = 0;
  /*IF (NEW.CNT < NEW.RCNT + NEW.UCNT OR (NEW.KIND = 1 AND NEW.RCNT + NEW.UCNT > 0)) THEN EXCEPTION E_TEST;*/

  OST = NEW.CNT - NEW.RCNT;
  IF (NEW.KIND = 0 AND OST > -E AND OST < E) THEN BEGIN
    NEW.KIND = NULL;
    NEW.RCNT = NEW.CNT;
    OST = 0;
  END ELSE IF (NEW.KIND IS NULL AND (OST < -E OR OST > E) ) THEN BEGIN
    NEW.KIND = 0;
  END

  IF (NEW.INDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0; UCNT = 0;
    IF (OLD.KIND IS NULL OR OLD.KIND = 0) THEN RCNT = RCNT - OLD.CNT * OLD.UNIT;
    ELSE IF (OLD.KIND = 1) THEN UCNT = UCNT - OLD.CNT * OLD.UNIT;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN RCNT = RCNT + NEW.CNT * NEW.UNIT;
    ELSE IF (NEW.KIND = 1) THEN UCNT = UCNT + NEW.CNT * NEW.UNIT;
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.INDOCID, NEW.INRECID, RCNT, UCNT;
  END ELSE BEGIN
    IF (NEW.CNT > 0 AND OST < -E) THEN EXCEPTION E_UPDATE;
    IF (NEW.CNT < 0 AND OST > E) THEN EXCEPTION E_UPDATE;
  END

  /*vozvrat*/
  IF (NEW.PDOCID IS NOT NULL) THEN BEGIN
    RCNT = 0; UCNT = 0;
    IF (OLD.KIND IS NULL OR OLD.KIND = 0) THEN RCNT = RCNT + OLD.CNT * OLD.UNIT;
    ELSE IF (OLD.KIND = 1) THEN UCNT = UCNT + OLD.CNT * OLD.UNIT;
    IF (NEW.KIND IS NULL OR NEW.KIND = 0) THEN BEGIN
      RCNT = RCNT - NEW.CNT * NEW.UNIT;
      NEW.RCNT = NEW.CNT;
      NEW.KIND = NULL;
    END ELSE IF (NEW.KIND = 1) THEN BEGIN
      UCNT = UCNT - NEW.CNT * NEW.UNIT;
      NEW.UCNT = NEW.CNT;
    END
    IF (RCNT <> 0 OR UCNT <> 0) THEN EXECUTE PROCEDURE UPDATE_OSTATOK NEW.PDOCID, NEW.PRECID, RCNT, UCNT;
  END

  /*update inprice and inndsprice*/
  IF (NEW.PRICE <> OLD.PRICE OR NEW.NDSPRICE <> OLD.NDSPRICE) THEN
    UPDATE DOC_PROD SET INPRICE = NEW.PRICE, INNDSPRICE = NEW.NDSPRICE WHERE INDOCID = NEW.DOCID AND INRECID = NEW.RECID;

  /*update product price*/
  IF (NEW.PRODID IS NOT NULL AND NEW.NEWPRICE IS NOT NULL) THEN
    UPDATE PRODUCT SET PRICE = NEW.NEWPRICE WHERE PRODID = NEW.PRODID;
END^


alter procedure CORRECT_OSTATOK (
    CLIENTID integer,
    FIRSTDATE timestamp,
    LASTDATE timestamp,
    SHOWERR integer)
returns (
    DOCID integer,
    RECID integer,
    UNIT double precision,
    CNT double precision,
    RCNT double precision,
    UCNT double precision,
    OUTCNT double precision,
    VCNT double precision,
    ERR_RCNT double precision,
    ERR_UCNT double precision)
as
DECLARE VARIABLE E DOUBLE PRECISION;
DECLARE VARIABLE PDOCID INTEGER;
DECLARE VARIABLE KIND INTEGER;
DECLARE VARIABLE ERCNT DOUBLE PRECISION;
DECLARE VARIABLE EUCNT DOUBLE PRECISION;
BEGIN
  E = 0.00001;

  FOR SELECT DOC_PROD.DOCID, DOC_PROD.RECID, DOC_PROD.PDOCID, DOC_PROD.KIND, DOC_PROD.UNIT, DOC_PROD.CNT, DOC_PROD.RCNT, DOC_PROD.UCNT
    FROM DOC, DOC_PROD
    WHERE (:CLIENTID IS NULL OR DOC.CLIENTID2=:CLIENTID) AND BIT_AND(DOC.KIND,1)<>0
    AND (:FIRSTDATE IS NULL OR DOC.DATE1>=:FIRSTDATE) AND (:LASTDATE IS NULL OR DOC.DATE1<=:LASTDATE)
    AND DOC_PROD.DOCID = DOC.DOCID
    INTO :DOCID, :RECID, :PDOCID, :KIND, :UNIT, :CNT, :ERR_RCNT, :ERR_UCNT
  DO BEGIN
    /*get vozvrat count*/
    SELECT SUM(DOC_PROD.CNT * DOC_PROD.UNIT)
      FROM DOC_PROD
      LEFT JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID
      WHERE DOC_PROD.PDOCID = :DOCID AND DOC_PROD.PRECID = :RECID AND DOC.KIND=1
      INTO :VCNT;
    IF (VCNT IS NULL) THEN VCNT = 0; ELSE VCNT = VCNT / UNIT;

    /*get release count*/
    SELECT SUM(DOC_PROD.CNT * DOC_PROD.UNIT)
      FROM DOC_PROD
      LEFT JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID
      WHERE DOC_PROD.INDOCID = :DOCID AND DOC_PROD.INRECID = :RECID AND DOC.KIND = 1
      INTO :OUTCNT;
    IF (OUTCNT IS NULL) THEN OUTCNT =0; ELSE OUTCNT = OUTCNT / UNIT;
    RCNT = OUTCNT - VCNT;

    /*get rezerved vozvrat count*/
    SELECT SUM(DOC_PROD.CNT *DOC_PROD.UNIT)
      FROM DOC_PROD
      LEFT JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID
      WHERE DOC_PROD.PDOCID = :DOCID AND DOC_PROD.PRECID = :RECID AND DOC.KIND = 257
      INTO :VCNT;
    IF (VCNT IS NULL) THEN VCNT = 0; ELSE VCNT = VCNT / UNIT;

    /*get rezerved release count*/
    SELECT SUM(DOC_PROD.CNT * DOC_PROD.UNIT)
      FROM DOC_PROD
      LEFT JOIN DOC ON DOC.DOCID = DOC_PROD.DOCID
      WHERE DOC_PROD.INDOCID = :DOCID AND DOC_PROD.INRECID = :RECID AND DOC.KIND = 257
      INTO :OUTCNT;
    IF (OUTCNT IS NULL) THEN OUTCNT = 0; ELSE OUTCNT = OUTCNT / UNIT;
    UCNT = OUTCNT - VCNT;

    /*if it`s vozvrat*/
    IF (PDOCID IS NOT NULL) THEN BEGIN
       IF (KIND IS NULL OR KIND = 0) THEN BEGIN
         RCNT = CNT;
         UCNT = 0;
       END ELSE IF (KIND = 1) THEN BEGIN
         RCNT = 0;
         UCNT = CNT;
       END
    END

    /*in not correct suspend data*/
    ERCNT = RCNT - ERR_RCNT;
    EUCNT = UCNT - ERR_UCNT;
    IF (ERCNT < -E OR ERCNT > E OR EUCNT < -E OR EUCNT > E) THEN BEGIN
      IF (SHOWERR IS NOT NULL) THEN SUSPEND;
      UPDATE DOC_PROD SET RCNT = :RCNT, UCNT = :UCNT WHERE DOCID = :DOCID AND RECID = :RECID;
    END
  END
END^


ALTER procedure CORRECT_DOC_PROD (
    SHOWERR INTEGER)
returns (
    DOCID INTEGER,
    RECID INTEGER,
    CLIENTID2 INTEGER,
    DATE1 DATE,
    ERR_CLIENTID2 INTEGER,
    ERR_DATE1 DATE)
as
BEGIN
  FOR SELECT DOCID, CLIENTID2, DATE1 FROM DOC 
  INTO :DOCID, :CLIENTID2, :DATE1
  DO BEGIN
    FOR SELECT RECID, CLIENTID2, DATE1 FROM DOC_PROD WHERE DOCID = :DOCID AND (CLIENTID2 <> :CLIENTID2 OR DATE1 <> :DATE1)
    INTO :RECID, :ERR_CLIENTID2, :ERR_DATE1
    DO BEGIN
      IF (SHOWERR IS NOT NULL) THEN SUSPEND;
      UPDATE DOC_PROD SET CLIENTID2 = :CLIENTID2, DATE1 = :DATE1 WHERE DOCID = :DOCID AND RECID = :RECID;
    END
  END
END^


alter procedure CORRECT_PRICE (
    SHOWERR integer)
returns (
    DOCID integer,
    RECID integer,
    INPRICE double precision,
    INNDSPRICE double precision,
    ERR_PRICE double precision,
    ERR_NDSPRICE double precision)
as
DECLARE VARIABLE INDOCID INTEGER;
DECLARE VARIABLE INRECID INTEGER;
BEGIN
  FOR SELECT DOCID, RECID, PRICE, NDSPRICE FROM DOC_PROD
  INTO :INDOCID, :INRECID, :INPRICE, :INNDSPRICE
  DO BEGIN
    FOR SELECT DOCID, RECID, PRICE, NDSPRICE
    FROM DOC_PROD
    WHERE INDOCID = :INDOCID AND INRECID = :INRECID AND (INPRICE <> :INPRICE OR INNDSPRICE <> INNDSPRICE)
    INTO DOCID, RECID, ERR_PRICE, ERR_NDSPRICE
    DO BEGIN
      IF (SHOWERR IS NOT NULL) THEN SUSPEND;
      UPDATE DOC_PROD SET INPRICE = :INPRICE, INNDSPRICE = :INNDSPRICE
      WHERE DOCID = :DOCID AND RECID = :RECID;
    END
  END
END^


alter procedure EXPORT_PRODUCT (
    CLIENTID1 integer,
    CLIENTID2 integer,
    INDOCID integer,
    INRECID integer,
    PRODID integer,
    CNT double precision,
    UNIT double precision)
returns (
    DOCID integer,
    RECID integer,
    PRICE double precision,
    NDSPRICE double precision)
as
DECLARE VARIABLE PARAM1 INTEGER;
DECLARE VARIABLE PER DOUBLE PRECISION;
DECLARE VARIABLE PRICEPER DOUBLE PRECISION;
DECLARE VARIABLE PRICERND INTEGER;
DECLARE VARIABLE INUNIT DOUBLE PRECISION;
DECLARE VARIABLE NDS DOUBLE PRECISION;
DECLARE VARIABLE INOUTPRICE DOUBLE PRECISION;
DECLARE VARIABLE INPRICE DOUBLE PRECISION;
DECLARE VARIABLE NEWPRICE DOUBLE PRECISION;
DECLARE VARIABLE INNDSPRICE DOUBLE PRECISION;
DECLARE VARIABLE SUM0 DOUBLE PRECISION;
DECLARE VARIABLE SUM1 DOUBLE PRECISION;
BEGIN
  FOR SELECT DOCID, PARAM1, PARAM2 FROM DOC
    WHERE CLIENTID1 = :CLIENTID1 AND CLIENTID2 = :CLIENTID2 AND KIND = 1 AND SKIND = -1
    INTO :DOCID, :PARAM1, :PER
  DO RECID = NULL;
  IF (DOCID IS NULL) THEN BEGIN
    SELECT DOCPARAM1, DOCPARAM2 FROM SKLAD WHERE CLIENTID = :CLIENTID1 INTO :PARAM1, :PER;
    DOCID = GEN_ID(GENDOCID,1);
    
    INSERT INTO DOC (DOCID, CLIENTID1, CLIENTID2, KIND, SKIND, PARAM1, PARAM2, SUM0, SUM1, SUM2)
    VALUES (:DOCID, :CLIENTID1, :CLIENTID2, 1, -1, :PARAM1, :PER, 0, 0, 0);
  END
  ELSE BEGIN
    SELECT RECID, UNIT, PRICE, NDSPRICE FROM DOC_PROD
    WHERE DOCID = :DOCID AND INDOCID = :INDOCID AND INRECID = :INRECID
    INTO :RECID, :INUNIT, :PRICE, :NDSPRICE;
  END
  IF (RECID IS NULL) THEN BEGIN
    IF (PARAM1 IS NULL) THEN PARAM1 = 0;
    IF (PER IS NULL) THEN PER = 0;
    
    SELECT PRICE_PERCENT, PRICE_ROUND FROM SKLAD WHERE CLIENTID = :CLIENTID2 INTO :PRICEPER, :PRICERND;
    IF (PRICEPER IS NULL) THEN PRICEPER = 0;
    IF (PRICERND IS NULL OR PRICERND = 0) THEN PRICERND = 100;
    
    IF (INDOCID IS NOT NULL) THEN BEGIN
      PRODID = NULL;
      
      SELECT PRODID, UNIT, PRICE, NEWPRICE, NDSPRICE FROM DOC_PROD
      WHERE DOCID = :INDOCID AND RECID = :INRECID
      INTO :PRODID, :INUNIT, :INPRICE, :INOUTPRICE, :INNDSPRICE;
    
      IF (PRODID IS NULL) THEN EXCEPTION E_OST_NOTFOUND;
    END ELSE BEGIN
      INUNIT = UNIT;
    END
    
    NDS = 0;
    SELECT NDS FROM PRODUCT WHERE PRODID = :PRODID INTO :NDS;
    
    SELECT MAX(RECID) + 10 FROM DOC_PROD WHERE DOCID = :DOCID INTO :RECID;
    IF (RECID IS NULL) THEN RECID = 10;
    
    CNT = CNT * (UNIT / INUNIT);
    IF (BIT_AND(PARAM1, 4) = 4) /*check in price*/
      THEN PRICE = ROUND_CURR(INPRICE * (1 + PER / 100));
      ELSE PRICE = ROUND_CURR(INOUTPRICE * (1 + PER / 100));
    IF (BIT_AND(PARAM1, 2) = 2) /*check nds*/
      THEN NDSPRICE = PRICE * (NDS / (100 + NDS));
      ELSE NDSPRICE = 0;
    NEWPRICE = ROUND_CEIL(PRICE * (1 + PRICEPER / 100), PRICERND);
    
    INSERT INTO DOC_PROD (DOCID, RECID, INDOCID, INRECID, PRODID, CNT, UNIT, INPRICE, INNDSPRICE, OUTPRICE, PRICE, NDSPRICE, NALOGSUM, NEWPRICE)
    VALUES (:DOCID, :RECID, :INDOCID, :INRECID, :PRODID, :CNT, :INUNIT, :INPRICE, :INNDSPRICE, :INOUTPRICE, :PRICE, :NDSPRICE, 0, :NEWPRICE);
  END
  ELSE BEGIN
    CNT = CNT * (UNIT / INUNIT);
    UPDATE DOC_PROD SET CNT = CNT + :CNT
    WHERE DOCID = :DOCID AND RECID = :RECID;
  END
  SUM0 = ROUND_CURR(CNT * INUNIT * PRICE);
  SUM1 = ROUND_CURR(CNT * INUNIT * NDSPRICE);
  UPDATE DOC SET SUM0 = SUM0 + :SUM0, SUM1 = SUM1 + :SUM1 WHERE DOCID = :DOCID;
END^


SET TERM ;^


COMMIT WORK;
EXECUTE PROCEDURE GET_VERSION(1);
COMMIT WORK;