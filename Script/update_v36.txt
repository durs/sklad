SET TERM ^;

ALTER TRIGGER DOC_BEFOREUPDATE
ACTIVE BEFORE UPDATE POSITION 0
AS
DECLARE VARIABLE DIFF DOUBLE PRECISION;
DECLARE VARIABLE NS INT;
DECLARE VARIABLE OS INT;
BEGIN
  /* correct field values */
  IF (NEW.CLIENTID1 IS NULL) THEN NEW.CLIENTID1 = 0;
  IF (NEW.CLIENTID2 IS NULL) THEN NEW.CLIENTID2 = 0;
  IF (NEW.CLIENTID1 = NEW.CLIENTID2) THEN NEW.CLIENTID2 = 0;
  IF (NEW.SUM0 IS NULL) THEN NEW.SUM0 = 0;
  IF (NEW.SUM3 IS NULL) THEN NEW.SUM3 = 0;
  IF (NEW.OST IS NULL) THEN NEW.OST = 0;

  /* test field values */
  /*IF (OLD.KIND>512) THEN EXCEPTION E_ARCHIV;*/
  IF (OLD.DOCID <> NEW.DOCID) THEN EXCEPTION E_FIELD_UPDATE;
  IF (OLD.CLIENTID1 <> NEW.CLIENTID1) THEN BEGIN
    /* except sklad */
    IF (EXISTS(SELECT * FROM DOC_PROD WHERE DOCID = OLD.DOCID)) THEN
    IF (EXISTS(SELECT * FROM SKLAD WHERE CLIENTID = NEW.CLIENTID1 OR CLIENTID = OLD.CLIENTID1))
    /*IF (EXISTS(SELECT * FROM DOC_PROD WHERE DOCID = OLD.DOCID AND INDOCID IS NOT NULL))*/
    THEN EXCEPTION E_FIELD_UPDATE;
  END
  IF (OLD.CLIENTID2 <> NEW.CLIENTID2) THEN BEGIN
    IF (EXISTS(SELECT * FROM DOC_PROD WHERE INDOCID = OLD.DOCID)) THEN EXCEPTION E_FIELD_UPDATE;
  END

  /*update doc no*/
  IF (OLD.SUM0 < 0) THEN OS = -1; ELSE OS = 1;
  IF (NEW.SUM0 < 0) THEN NS = -1; ELSE NS = 1;
  IF ((OLD.DOCNO > OLD.DOCNO) OR (OLD.CLIENTID1 <> NEW.CLIENTID1)
    OR (OLD.KIND <> NEW.KIND) OR (OLD.SKIND <> NEW.SKIND)
    OR (OS <> NS)
  )
  THEN BEGIN
    EXECUTE PROCEDURE UPDATE_DOCNO OLD.CLIENTID1, OLD.KIND, OLD.SKIND, OLD.DOCNO, OLD.SUM0, 1 RETURNING_VALUES OLD.DOCNO;
    EXECUTE PROCEDURE UPDATE_DOCNO NEW.CLIENTID1, NEW.KIND, NEW.SKIND, NEW.DOCNO, NEW.SUM0, 0 RETURNING_VALUES NEW.DOCNO;
  END

  /*update debit*/
  IF ((OLD.KIND < 256 AND NEW.KIND > 256) OR (OLD.CLIENTID1 <> NEW.CLIENTID1) OR (OLD.CLIENTID2 <> NEW.CLIENTID2)) THEN BEGIN
    /*delete debit*/
    DIFF = OLD.OST - OLD.SUM0;
    EXECUTE PROCEDURE UPDATE_DEBIT_UNDO OLD.DOCID, OLD.PDOCID, OLD.CLIENTID1, OLD.CLIENTID2, :DIFF;
    NEW.OST = NEW.SUM0;
  END 
  ELSE IF ((OLD.KIND > 256 AND NEW.KIND < 256) OR (OLD.CLIENTID1 <> NEW.CLIENTID1) OR (OLD.CLIENTID2 <> NEW.CLIENTID2)) THEN BEGIN
    /*insert debit*/
    EXECUTE PROCEDURE UPDATE_DEBIT NEW.DOCID, NEW.PDOCID, NEW.CLIENTID1, NEW.CLIENTID2, NEW.SUM0
    RETURNING_VALUES NEW.OST;    
  END 
  ELSE IF (NEW.KIND < 256) THEN BEGIN
    /*update debit*/
    IF (OLD.SUM0 IS NULL) THEN DIFF = NEW.SUM0; ELSE DIFF=NEW.SUM0-OLD.SUM0;
    IF (DIFF<>0) THEN BEGIN
      IF (OLD.OST IS NULL) THEN NEW.OST = DIFF; ELSE NEW.OST = OLD.OST+DIFF;
      EXECUTE PROCEDURE UPDATE_DEBIT NEW.DOCID, NEW.PDOCID, NEW.CLIENTID1, NEW.CLIENTID2, NEW.OST
      RETURNING_VALUES NEW.OST;
      DIFF = 0;
      IF (NEW.SUM0 > 0) THEN BEGIN
        IF (NEW.OST < 0) THEN BEGIN
          DIFF = NEW.OST;
          NEW.OST = 0;
        END 
        ELSE IF (NEW.OST > NEW.SUM0) THEN BEGIN
          DIFF = NEW.OST - NEW.SUM0;
          NEW.OST = NEW.SUM0;
        END
      END 
      ELSE BEGIN
        IF (NEW.OST > 0) THEN BEGIN
          DIFF = NEW.OST;
          NEW.OST = 0;          
        END 
        ELSE IF (NEW.OST < NEW.SUM0) THEN BEGIN
          DIFF = NEW.OST - NEW.SUM0;
          NEW.OST = NEW.SUM0;
        END
      END
      IF (DIFF <> 0) THEN EXECUTE PROCEDURE UPDATE_DEBIT_UNDO NEW.DOCID, NEW.PDOCID, NEW.CLIENTID1, NEW.CLIENTID2, :DIFF;
    END
  END
  ELSE BEGIN
    NEW.OST = NEW.SUM0;
  END

  /*update transport rec doc_prod*/
  IF (NEW.SUM3 <> OLD.SUM3) THEN
    EXECUTE PROCEDURE UPDATE_TRANSPORT NEW.DOCID, NEW.SUM3;

  /*update doc_prod*/
  IF (NEW.CLIENTID2 <> OLD.CLIENTID2
      OR NEW.DATE1 <> OLD.DATE1
      OR (NEW.DATE1 IS NULL AND OLD.DATE1 IS NOT NULL)
      OR (OLD.DATE1 IS NULL AND NEW.DATE1 IS NOT NULL)
      )
  THEN
    UPDATE DOC_PROD SET CLIENTID2 = NEW.CLIENTID2, DATE1 = NEW.DATE1 WHERE DOCID = NEW.DOCID;
END
 ^
 
SET TERM ;^

EXECUTE PROCEDURE GET_VERSION(1);
COMMIT WORK;